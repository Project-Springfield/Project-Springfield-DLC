<ScriptPackage>
	<EnterMusicCategory ignoreHUD="true">
		<Action type="focusOnMenuItem" menuCategory="Music" />
	</EnterMusicCategory>
	<GoTo_MysteryBox ignoreHUD="true">
		<Action type="runScript" script="MiscScripts:ReturnToGameStateWithSound" />
		<Action type="reward">
			<Item type="consumable" name="Music_MysteryBox" useImmediately="true" />
		</Action>
	</GoTo_MysteryBox>
	<GoTo_Tappables ignoreHUD="true">
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<False>
				<Action type="gotoland" land="Springfield" showPopup="true" />
			</False>
			<True>
				<Action type="if">
					<If expression="#program;                         if(User::getVariable('BankedFestivalFans') &gt; 0)                         {                             return false;                         }                         else                         {                             var character = Character::find('FestivalFan');                             var characterInstanceList = Land::getAllInstancesOfObject(character);                             foreach(characterInstanceList as instance)                             {                                 if(!Object::getDelete(instance))                                 {                                     return false;                                 }                             }                         }                         return true;">
						<Then>
							<Action type="hudTip" text="UI_Music_FestivalFan_Cleared" time="10s" requiresActiveHUD="false" />
						</Then>
					</If>
					<Else>
						<Then>
							<Action type="pantoobject" time="0" character="FestivalFan" flagsToAvoid="delete" />
						</Then>
					</Else>
				</Action>
			</True>
		</Action>
	</GoTo_Tappables>
	<GoTo_Tappables_SystemMessage ignoreHUD="true">
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<False>
				<Action type="gotoland" land="Springfield" showPopup="true" />
			</False>
			<True>
				<Action type="if">
					<If expression="#program;                         if(User::getVariable('BankedFestivalFans') &gt; 0)                         {                         return false;                         }                         else                         {                         var character = Character::find('FestivalFan');                         var characterInstanceList = Land::getAllInstancesOfObject(character);                         foreach(characterInstanceList as instance)                         {                         if(!Object::getDelete(instance))                         {                         return false;                         }                         }                         }                         return true;">
						<Then>
							<Action type="message" text="UI_Music_FestivalFan_Cleared" />
						</Then>
					</If>
					<Else>
						<Then>
							<Action type="pantoobject" time="0" character="FestivalFan" flagsToAvoid="delete" />
						</Then>
					</Else>
				</Action>
			</True>
		</Action>
	</GoTo_Tappables_SystemMessage>
	<FestivalFan_Local_Radius parallel="true" cache="true">
		<Action type="checkRequirements" ignoreObject="false">
			<Requirements>
				<Requirement type="formula" formula="Object::Tapped!=1" />
			</Requirements>
			<True>
				<Action type="setObjectVariable" variable="Tapped" value="1" allowOrphan="false" />
				<Action type="setObjectFlag" flags="delete" />
				<Action type="runScriptOnAll" character="FestivalFan" in_radius="5" radius_delay="0.3" script="Music_Scripts:FestivalFan_Local_InRadius" />
				<Action type="runScript" script="Music_Scripts:FestivalFanTapped_Local" />
			</True>
		</Action>
	</FestivalFan_Local_Radius>
	<FestivalFan_Local_InRadius parallel="true" cache="true">
		<Action type="checkRequirements" ignoreObject="false">
			<Requirements>
				<Requirement type="formula" formula="Object::Tapped!=1" />
			</Requirements>
			<True>
				<Action type="setObjectVariable" variable="Tapped" value="1" allowOrphan="false" />
				<Action type="setObjectFlag" flags="delete" />
				<Action type="runScript" script="Music_Scripts:FestivalFanTapped_Local" />
			</True>
		</Action>
	</FestivalFan_Local_InRadius>
	<FestivalFanTapped_Local parallel="true" cache="true">
		<Action type="checkRequirements" ignoreObject="false">
			<Requirements>
				<Requirement type="active quest" quest="RockAndRollNeverForgetsUnfortunately_4" />
			</Requirements>
			<True>
				<Action type="setVariable" intVariable="FestivalFans_Tapped" intValue="FestivalFans_Tapped+1" />
			</True>
		</Action>
		<Action type="checkRequirements" ignoreObject="false">
			<Requirements>
				<Requirement type="active quest" quest="Music_DCS_ClearFestivalFans" />
			</Requirements>
			<True>
				<Action type="setVariable" intVariable="Music_DCS_FestivalFans" intValue="Music_DCS_FestivalFans+1" />
			</True>
		</Action>
		<Action type="incrementSessionCounter" counter="Music_FestivalFans_Tapped" increment="1" />
		<Action type="actionSequence" script="Music_Scripts:FetivalFanReward_Local" />
		<Action type="runScript" package="Music_Scripts" script="FestivalFan_Tapped" />
		<Action type="stop" />
		<Action type="anim-play" character="FestivalFan" animation="Tap" />
		<Action type="anim-waitforend" />
		<Action type="fade" fade="outmax" />
		<Action type="deletecharacter" character="FestivalFan" />
		<Action type="if">
			<If expression="#program;                 if(User::getVariable('BankedFestivalFans') &gt; 0)                 {                     return false;                 }                 else                 {                     var character = Character::find('FestivalFan');                     var characterInstanceList = Land::getAllInstancesOfObject(character);                     foreach(characterInstanceList as instance)                     {                         if(!Object::getDelete(instance))                         {                             return false;                         }                     }                 }                 return true;">
				<Then>
					<Action type="hudTip" text="UI_Music_FestivalFan_Cleared" time="10s" requiresActiveHUD="false" />
				</Then>
			</If>
		</Action>
	</FestivalFanTapped_Local>
	<FetivalFanReward_Local parallel="true" cache="true">
		<Action type="if">
			<If>
				<Requirement type="reqList" location="Music_Requirements:ActOne" />
				<Then>
					<Action type="reward" save="true" Music_ActivePrizeTrackCurrency="__Music_SpreadSheet_Config:Tappables:Award_PTCurrency1__" chance="__Music_SpreadSheet_Config:Tappables:DropChance_PTCurrency__" chanceType="s" suppress_sound="true" />
					<Action type="reward" save="true" Music_TicketStubs="__Music_SpreadSheet_Config:Tappables:Award_Craft1__" chance="__Music_SpreadSheet_Config:Tappables:DropChance_Craft1__" chanceType="s" suppress_sound="true" />
					<Action type="reward" save="true" Music_Lawyers="__Music_SpreadSheet_Config:Tappables:Award_Social1__" chance="__Music_SpreadSheet_Config:Tappables:DropChance_Social__" chanceType="s" suppress_sound="true" />
				</Then>
			</If>
			<ElseIf>
				<Requirement type="reqList" location="Music_Requirements:ActTwo" />
				<Then>
					<Action type="reward" save="true" Music_ActivePrizeTrackCurrency="__Music_SpreadSheet_Config:Tappables:Award_PTCurrency2__" chance="__Music_SpreadSheet_Config:Tappables:DropChance_PTCurrency__" chanceType="s" suppress_sound="true" />
					<Action type="reward" save="true" Music_TicketStubs="__Music_SpreadSheet_Config:Tappables:Award_Craft2__" chance="__Music_SpreadSheet_Config:Tappables:DropChance_Craft1__" chanceType="s" suppress_sound="true" />
					<Action type="reward" save="true" Music_Lawyers="__Music_SpreadSheet_Config:Tappables:Award_Social2__" chance="__Music_SpreadSheet_Config:Tappables:DropChance_Social__" chanceType="s" suppress_sound="true" />
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirement type="reqList" location="Music_Requirements:ActThree" />
				<Then>
					<Action type="reward" save="true" Music_ActivePrizeTrackCurrency="__Music_SpreadSheet_Config:Tappables:Award_PTCurrency3__" chance="__Music_SpreadSheet_Config:Tappables:DropChance_PTCurrency__" chanceType="s" suppress_sound="true" />
					<Action type="reward" save="true" Music_TicketStubs="__Music_SpreadSheet_Config:Tappables:Award_Craft3__" chance="__Music_SpreadSheet_Config:Tappables:DropChance_Craft1__" chanceType="s" suppress_sound="true" />
					<Action type="reward" save="true" Music_Lawyers="__Music_SpreadSheet_Config:Tappables:Award_Social3__" chance="__Music_SpreadSheet_Config:Tappables:DropChance_Social__" chanceType="s" suppress_sound="true" />
				</Then>
			</ElseIf>
		</Action>
	</FetivalFanReward_Local>
	<FestivalFanTapped_Friend>
		<Action type="checkRequirements">
			<Requirements>
				<Requirement type="friendactioncount" amount="3" special="false" not="true" />
			</Requirements>
			<True>
				<Action type="if">
					<If>
						<Requirement type="reqList" location="Music_Requirements:ActOne" />
						<Then>
							<Action type="friendActionPerformed" />
							<Action type="reward" save="true" Music_ActivePrizeTrackCurrency="selector Music_PTCurrencyPerFriendActionDisplayAct1" chance="__Music_SpreadSheet_Config:Tappables:DropChance_PTCurrency__" chanceType="s" suppress_sound="true" />
							<Action type="reward" save="true" Music_TicketStubs="selector Music_CraftingCurrencyPerFriendActionAct1" chance="__Music_SpreadSheet_Config:Tappables:DropChance_Craft1__" chanceType="s" suppress_sound="true" />
							<Action type="reward" save="true" Music_Lawyers="selector Music_SocialCurrencyPerFriendActionAct1" chance="__Music_SpreadSheet_Config:Tappables:DropChance_Social__" chanceType="s" suppress_sound="true" />
						</Then>
					</If>
					<ElseIf>
						<Requirement type="reqList" location="Music_Requirements:ActTwo" />
						<Then>
							<Action type="friendActionPerformed" />
							<Action type="reward" save="true" Music_ActivePrizeTrackCurrency="selector Music_PTCurrencyPerFriendActionDisplayAct2" chance="__Music_SpreadSheet_Config:Tappables:DropChance_PTCurrency__" chanceType="s" suppress_sound="true" />
							<Action type="reward" save="true" Music_TicketStubs="selector Music_CraftingCurrencyPerFriendActionAct2" chance="__Music_SpreadSheet_Config:Tappables:DropChance_Craft1__" chanceType="s" suppress_sound="true" />
							<Action type="reward" save="true" Music_Lawyers="selector Music_SocialCurrencyPerFriendActionAct2" chance="__Music_SpreadSheet_Config:Tappables:DropChance_Social__" chanceType="s" suppress_sound="true" />
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirement type="reqList" location="Music_Requirements:ActThree" />
						<Then>
							<Action type="friendActionPerformed" />
							<Action type="reward" save="true" Music_ActivePrizeTrackCurrency="selector Music_PTCurrencyPerFriendActionDisplayAct3" chance="__Music_SpreadSheet_Config:Tappables:DropChance_PTCurrency__" chanceType="s" suppress_sound="true" />
							<Action type="reward" save="true" Music_TicketStubs="selector Music_CraftingCurrencyPerFriendActionAct3" chance="__Music_SpreadSheet_Config:Tappables:DropChance_Craft1__" chanceType="s" suppress_sound="true" />
							<Action type="reward" save="true" Music_Lawyers="selector Music_SocialCurrencyPerFriendActionAct3" chance="__Music_SpreadSheet_Config:Tappables:DropChance_Social__" chanceType="s" suppress_sound="true" />
						</Then>
					</ElseIf>
				</Action>
				<Action type="reward" save="true" money="selector socialMoneyReward" xp="1" FriendPoint="selector friendPointsReward" donuts="1" chance="selector socialDonutChanceReward" chanceType="d" suppress_sound="true" />
				<Action type="sound" sound="Gambler_Tap" />
				<Action type="stop" />
				<Action type="anim-play" character="FestivalFan" animation="Tap" />
				<Action type="anim-waitforend" />
				<Action type="fade" fade="outmax" />
				<Action type="deletecharacter" character="FestivalFan" />
			</True>
		</Action>
	</FestivalFanTapped_Friend>
	<SpawnFriendFestivalFans>
		<Action type="if">
			<If>
				<Requirements>
					<Requirement type="friendlevel" level="15" />
				</Requirements>
				<Then>
					<Action type="createobject" name="FestivalFan" count="30" save="true" panCamera="false" />
				</Then>
			</If>
			<ElseIf>
				<Requirements>
					<Requirement type="friendlevel" level="10" />
				</Requirements>
				<Then>
					<Action type="createobject" name="FestivalFan" count="25" save="true" panCamera="false" />
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="friendlevel" level="5" />
				</Requirements>
				<Then>
					<Action type="createobject" name="FestivalFan" count="20" save="true" panCamera="false" />
				</Then>
			</ElseIf>
		</Action>
	</SpawnFriendFestivalFans>
	<FestivalFan_RandomRelaxed cache="true" parallel="true">
		<Action type="setMovementBehavior">
			<MovementBehavior mode="RandomRelaxed" />
		</Action>
	</FestivalFan_RandomRelaxed>
	<FestivalFan_Gained cache="true" parallel="true">
		<Action type="if">
			<If>
				<Requirements>
					<Requirement type="formula" formula="NumSessionLocationsActive == 0" />
				</Requirements>
				<Then>
					<Action type="runScript" script="Music_Scripts:FestivalFan_RandomRelaxed" />
				</Then>
			</If>
			<Else>
				<Then>
					<Action type="runScript" script="Music_Scripts:FestivalFan_Crowd" />
				</Then>
			</Else>
		</Action>
	</FestivalFan_Gained>
	<FestivalFan_Crowd cache="true" parallel="true">
		<Action type="if">
			<If>
				<Requirements>
					<Requirement type="formula" formula="ObjectVars::getVariableInt('Obj_SessionsLocations_Active', toString(SessionLocationIndex)) == Object::getId(Building::find('SimpsonHome'))" />
				</Requirements>
				<Then>
					<Action type="setMovementBehavior">
						<MovementBehavior mode="RandomRelaxed" startState="AtLocation" orbitBuildingName="SimpsonHome" orbitMaxDistance="7" faceOrbitBuilding="true" orbitFrontDoor="true" randomOrbitMaxOffset="3" />
					</Action>
				</Then>
			</If>
			<ElseIf>
				<Requirements>
					<Requirement type="formula" formula="ObjectVars::getVariableInt('Obj_SessionsLocations_Active', toString(SessionLocationIndex)) == Object::getId(Building::find('MoesTavern'))" />
				</Requirements>
				<Then>
					<Action type="setMovementBehavior">
						<MovementBehavior mode="RandomRelaxed" startState="AtLocation" orbitBuildingName="MoesTavern" orbitMaxDistance="7" faceOrbitBuilding="true" orbitFrontDoor="true" randomOrbitMaxOffset="3" />
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="formula" formula="ObjectVars::getVariableInt('Obj_SessionsLocations_Active', toString(SessionLocationIndex)) == Object::getId(Building::find('Kwik-E-Mart'))" />
				</Requirements>
				<Then>
					<Action type="setMovementBehavior">
						<MovementBehavior mode="RandomRelaxed" startState="AtLocation" orbitBuildingName="Kwik-E-Mart" orbitMaxDistance="7" faceOrbitBuilding="true" orbitFrontDoor="true" randomOrbitMaxOffset="3" />
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="formula" formula="ObjectVars::getVariableInt('Obj_SessionsLocations_Active', toString(SessionLocationIndex)) == Object::getId(Building::find('KrustyBurger'))" />
				</Requirements>
				<Then>
					<Action type="setMovementBehavior">
						<MovementBehavior mode="RandomRelaxed" startState="AtLocation" orbitBuildingName="KrustyBurger" orbitMaxDistance="7" faceOrbitBuilding="true" orbitFrontDoor="true" randomOrbitMaxOffset="3" />
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="formula" formula="ObjectVars::getVariableInt('Obj_SessionsLocations_Active', toString(SessionLocationIndex)) == Object::getId(Building::find('SpringfieldElementary'))" />
				</Requirements>
				<Then>
					<Action type="setMovementBehavior">
						<MovementBehavior mode="RandomRelaxed" startState="AtLocation" orbitBuildingName="SpringfieldElementary" orbitMaxDistance="7" faceOrbitBuilding="true" orbitFrontDoor="true" randomOrbitMaxOffset="3" />
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="formula" formula="ObjectVars::getVariableInt('Obj_SessionsLocations_Active', toString(SessionLocationIndex)) == Object::getId(Building::find('RockStage'))" />
				</Requirements>
				<Then>
					<Action type="setMovementBehavior">
						<MovementBehavior mode="RandomRelaxed" startState="AtLocation" orbitBuildingName="RockStage" orbitMaxDistance="7" faceOrbitBuilding="true" orbitFrontDoor="true" randomOrbitMaxOffset="3" />
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="formula" formula="ObjectVars::getVariableInt('Obj_SessionsLocations_Active', toString(SessionLocationIndex)) == Object::getId(Building::find('PopStage'))" />
				</Requirements>
				<Then>
					<Action type="setMovementBehavior">
						<MovementBehavior mode="RandomRelaxed" startState="AtLocation" orbitBuildingName="PopStage" orbitMaxDistance="7" faceOrbitBuilding="true" orbitFrontDoor="true" randomOrbitMaxOffset="3" />
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="formula" formula="ObjectVars::getVariableInt('Obj_SessionsLocations_Active', toString(SessionLocationIndex)) == Object::getId(Building::find('HipHopStage'))" />
				</Requirements>
				<Then>
					<Action type="setMovementBehavior">
						<MovementBehavior mode="RandomRelaxed" startState="AtLocation" orbitBuildingName="HipHopStage" orbitMaxDistance="7" faceOrbitBuilding="true" orbitFrontDoor="true" randomOrbitMaxOffset="3" />
					</Action>
				</Then>
			</ElseIf>
		</Action>
		<Action type="setVariable" intVariable="SessionLocationIndex" intValue="mod((SessionLocationIndex+1), NumSessionLocationsActive)" />
	</FestivalFan_Crowd>
	<ScheduleRefreshFestivalFanLocations cache="true">
		<Action type="scheduleScript" mode="replace" script="Music_Scripts:RefreshFestivalFanLocations" shouldSave="false" relativeTime="1s" />
	</ScheduleRefreshFestivalFanLocations>
	<FestivalFan_RecalcSessions parallel="true" cache="true">
		<Action type="program">
			<Program><![CDATA[#program;
                
                var count = 0;
                
                ObjectVars::clearVariables('Obj_SessionsLocations_Active');
                
                if(Requirements::checkRequirementList('Music_Requirements:SessionActive_SimpsonHome'))
                {
                    ObjectVars::pushBackVariable('Obj_SessionsLocations_Active', toString(Object::getId(Building::find('SimpsonHome'))));
                    count += 1;
                }
                if(Requirements::checkRequirementList('Music_Requirements:SessionActive_MoesTavern'))
                {
                    ObjectVars::pushBackVariable('Obj_SessionsLocations_Active', toString(Object::getId(Building::find('MoesTavern'))));
                    count += 1;
                }
                if(Requirements::checkRequirementList('Music_Requirements:SessionActive_KwikEMart'))
                {
                    ObjectVars::pushBackVariable('Obj_SessionsLocations_Active', toString(Object::getId(Building::find('Kwik-E-Mart'))));
                    count += 1;
                }
                if(Requirements::checkRequirementList('Music_Requirements:SessionActive_KrustyBurger'))
                {
                    ObjectVars::pushBackVariable('Obj_SessionsLocations_Active', toString(Object::getId(Building::find('KrustyBurger'))));
                    count += 1;
                }
                if(Requirements::checkRequirementList('Music_Requirements:SessionActive_SpringfieldElementary'))
                {
                    ObjectVars::pushBackVariable('Obj_SessionsLocations_Active', toString(Object::getId(Building::find('SpringfieldElementary'))));
                    count += 1;
                }
                if(Requirements::checkRequirementList('Music_Requirements:SessionActive_RockStage'))
                {
                    ObjectVars::pushBackVariable('Obj_SessionsLocations_Active', toString(Object::getId(Building::find('RockStage'))));
                    count += 1;
                }
                if(Requirements::checkRequirementList('Music_Requirements:SessionActive_PopStage'))
                {
                    ObjectVars::pushBackVariable('Obj_SessionsLocations_Active', toString(Object::getId(Building::find('PopStage'))));
                    count += 1;
                }
                if(Requirements::checkRequirementList('Music_Requirements:SessionActive_HipHopStage'))
                {
                    ObjectVars::pushBackVariable('Obj_SessionsLocations_Active', toString(Object::getId(Building::find('HipHopStage'))));
                    count += 1;
                }
                
                User::setVariable('NumSessionLocationsActive', count, false);
                User::setVariable('SessionLocationIndex', 0, false);
            ]]></Program>
		</Action>
	</FestivalFan_RecalcSessions>
	<EndIdleWander parallel="true" runQueueState="RunInAnyState">
		<Action type="setcontroller" controller="FestivalFan_RockOut" character="" block="false" focus="false" />
	</EndIdleWander>
	<SpawnFullHudTip>
		<Action type="hudTip" text="UI_Music_TownFull" time="3s" queue="true" waitForHUD="true" />
	</SpawnFullHudTip>
	<MusicFriendsHUDInfo parallel="true">
		<Action type="triggerevent" name="ScriptEvent" data="Music_UpdateFriendActionHelpVariables" />
		<Action type="runScript" script="Music_Scripts:MusicFriendsHUDInfoAux" />
	</MusicFriendsHUDInfo>
	<MusicFriendsHUDInfoAux>
		<Action type="checkRequirements">
			<Requirement type="reqList" location="Music_Requirements:ActOne" />
			<True>
				<Action type="checkRequirements">
					<Requirement type="variable" variable="FriendActionsCount" count="30" not="true" />
					<True>
						<Action type="checkRequirements">
							<Requirement type="variable" variable="Music_SocialUpgrade_Purchased" />
							<True>
								<Action type="notification" title="RES_Music_PT1_Plural" button="UI_OK" text="GEN_ResourceListing_Music_PT1_Upgrade" icon="ICO_CUR_Music_RockCurrency_LG">
									<Variable name="Music_PT1_FOR_NEXT_FRIEND_ACTION" type="int" />
									<Variable name="Music_ACTIONS_UNTIL_NEXT_MULTIPLIER" type="int" />
								</Action>
							</True>
							<False>
								<Action type="notification" title="RES_Music_PT1_Plural" button="UI_OK" text="GEN_ResourceListing_Music_PT1" icon="ICO_CUR_Music_RockCurrency_LG">
									<Variable name="Music_PT1_FOR_NEXT_FRIEND_ACTION" type="int" />
									<Variable name="Music_ACTIONS_UNTIL_NEXT_MULTIPLIER" type="int" />
								</Action>
							</False>
						</Action>
					</True>
					<False>
						<Action type="notification" title="RES_Music_PT1_Plural" button="UI_OK" text="UI_Music_OutOfFriendActions_PT1" icon="ICO_CUR_Music_RockCurrency_LG"></Action>
					</False>
				</Action>
			</True>
		</Action>
		<Action type="checkRequirements">
			<Requirement type="reqList" location="Music_Requirements:ActTwo" />
			<True>
				<Action type="checkRequirements">
					<Requirement type="variable" variable="FriendActionsCount" count="30" not="true" />
					<True>
						<Action type="checkRequirements">
							<Requirement type="variable" variable="Music_SocialUpgrade_Purchased" />
							<True>
								<Action type="notification" title="RES_Music_PT2_Plural" button="UI_OK" text="GEN_ResourceListing_Music_PT2_Upgrade" icon="ICO_CUR_Music_PopCurrency_LG">
									<Variable name="Music_PT2_FOR_NEXT_FRIEND_ACTION" type="int" />
									<Variable name="Music_ACTIONS_UNTIL_NEXT_MULTIPLIER" type="int" />
								</Action>
							</True>
							<False>
								<Action type="notification" title="RES_Music_PT2_Plural" button="UI_OK" text="GEN_ResourceListing_Music_PT2" icon="ICO_CUR_Music_PopCurrency_LG">
									<Variable name="Music_PT2_FOR_NEXT_FRIEND_ACTION" type="int" />
									<Variable name="Music_ACTIONS_UNTIL_NEXT_MULTIPLIER" type="int" />
								</Action>
							</False>
						</Action>
					</True>
					<False>
						<Action type="notification" title="RES_Music_PT2_Plural" button="UI_OK" text="UI_Music_OutOfFriendActions_PT2" icon="ICO_CUR_Music_PopCurrency_LG"></Action>
					</False>
				</Action>
			</True>
		</Action>
		<Action type="checkRequirements">
			<Requirement type="reqList" location="Music_Requirements:ActThree" />
			<True>
				<Action type="checkRequirements">
					<Requirement type="variable" variable="FriendActionsCount" count="30" not="true" />
					<True>
						<Action type="checkRequirements">
							<Requirement type="variable" variable="Music_SocialUpgrade_Purchased" />
							<True>
								<Action type="notification" title="RES_Music_PT3_Plural" button="UI_OK" text="GEN_ResourceListing_Music_PT3_Upgrade" icon="ICO_CUR_Music_HipHopCurrency_LG">
									<Variable name="Music_PT3_FOR_NEXT_FRIEND_ACTION" type="int" />
									<Variable name="Music_ACTIONS_UNTIL_NEXT_MULTIPLIER" type="int" />
								</Action>
							</True>
							<False>
								<Action type="notification" title="RES_Music_PT3_Plural" button="UI_OK" text="GEN_ResourceListing_Music_PT3" icon="ICO_CUR_Music_HipHopCurrency_LG">
									<Variable name="Music_PT3_FOR_NEXT_FRIEND_ACTION" type="int" />
									<Variable name="Music_ACTIONS_UNTIL_NEXT_MULTIPLIER" type="int" />
								</Action>
							</False>
						</Action>
					</True>
					<False>
						<Action type="notification" title="RES_Music_PT3_Plural" button="UI_OK" text="UI_Music_OutOfFriendActions_PT3" icon="ICO_CUR_Music_HipHopCurrency_LG"></Action>
					</False>
				</Action>
			</True>
		</Action>
	</MusicFriendsHUDInfoAux>
	<ActOnePrizeTrackTab ignoreHUD="true">
		<Action type="notification" title="UI_Music_PrizeTrack_Title" button="UI_OK" text="UI_Superheroes2_PrizeTrack_Future_text" tooltip="UI_Superheroes2_PrizeTrack_Future_toolTip" icon="ICO_Music_Act2Teaser" darken="true" />
	</ActOnePrizeTrackTab>
	<ActTwoPrizeTrackTab ignoreHUD="true">
		<Action type="notification" title="UI_Music_PrizeTrack_Title" button="UI_OK" text="UI_Superheroes2_PrizeTrack_Future_text" tooltip="UI_Superheroes2_PrizeTrack_Future_toolTip" icon="ICO_Music_Act3Teaser" darken="true" />
	</ActTwoPrizeTrackTab>
	<PrizeListButtonPressed runQueueState="RunInAnyState" ignoreHUD="true">
		<Action type="checkExpression" expression="Music_EventHubTabValue">
			<ExpressionCase value="0">
				<Action type="runScript" script="Music_Scripts:Tab_PrizeTrack" />
			</ExpressionCase>
			<ExpressionCase value="1">
				<Action type="runScript" script="Music_Scripts:Tab_Sessions" />
			</ExpressionCase>
			<ExpressionCase value="4">
				<Action type="runScript" script="Music_Scripts:Tab_Performers" />
			</ExpressionCase>
			<ExpressionCase value="2">
				<Action type="runScript" script="Music_Scripts:Tab_Crafting" />
			</ExpressionCase>
			<ExpressionCase value="3">
				<Action type="runScript" script="Music_Scripts:Tab_WeirdAl" />
			</ExpressionCase>
		</Action>
	</PrizeListButtonPressed>
	<SessionsButtonPressed runQueueState="RunInAnyState">
		<Action type="runScript" script="Music_Scripts:Tab_Sessions" />
	</SessionsButtonPressed>
	<Tab_Crafting>
		<Action type="if">
			<If expression="Music_CraftingGuideSeen">
				<Then>
					<Action type="updateVariable" variable="Music_EventHubTabValue" value="2" />
					<Action type="gotoState" state="GameState_HubCraftingMenu" forceState="false">
						<Extras>
							<Attribute name="MenuConfig" value="Music_CraftingConfig:CraftingMenu" />
							<Attribute name="ExitButtonScript" value="MiscScripts:GoToInGame" />
							<Attribute name="onLoadScript" value="Music_Scripts_Crafting:UpdateCrafting" />
							<Attribute name="specialEvent" value="Music_Event" />
						</Extras>
					</Action>
					<Action type="markBadgeViewed" badgeName="Music_CraftingBadge" />
				</Then>
			</If>
			<Else>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GuidePanel_Crafting" />
				</Then>
			</Else>
		</Action>
	</Tab_Crafting>
	<Tab_Crafting_ScrollTo>
		<Action type="updateVariable" variable="Music_EventHubTabValue" value="2" />
		<Action type="gotoState" state="GameState_HubCraftingMenu" forceState="false" formatMe="deep">
			<Extras>
				<Attribute name="MenuConfig" value="Music_CraftingConfig:CraftingMenu" />
				<Attribute name="ExitButtonScript" value="MiscScripts:GoToInGame" />
				<Attribute name="onLoadScript" value="Music_Scripts_Crafting:UpdateCrafting" />
				<Attribute name="specialEvent" value="Music_Event" />
				<Attribute name="ItemToScrollTo" value="{ItemToScrollTo}" />
			</Extras>
		</Action>
		<Action type="markBadgeViewed" badgeName="Music_CraftingBadge" />
	</Tab_Crafting_ScrollTo>
	<OpenMenu_SessionsMenuSimpsonHome ignoreHUD="true">
		<Action type="gotoState" state="GameState_JobSelection">
			<Extras>
				<Attribute name="menu" value="MonsterBattleHUB" />
				<Attribute name="scriptResProvider" value="MonsterBattleHUB.mns" />
				<Attribute name="menuConfig" value="Music_MenuConfig_Sessions:MenuConfig" />
				<Attribute name="buttonsConfig" value="Music_MenuConfig_Sessions:ButtonConfig" />
				<Attribute name="generalConfig" value="Music_MenuConfig_Sessions:SessionsSimpsonHome" />
				<Attribute name="jobListConfig" value="Music_MenuConfig_Sessions:JobListSimpsonHome" />
				<Attribute name="baseRewardPath" value="Music_MenuConfig_Sessions:RewardValue" />
				<Attribute name="autoSlotCharacterID" value="AutoSlotCharacterID" />
				<Attribute name="specialEvent" value="Music_Event" />
			</Extras>
			<Objects>
				<ObjectByUID UID="CurrentSessionBuildingServerID" land="local">
					<CopyObject index="0" />
				</ObjectByUID>
			</Objects>
		</Action>
	</OpenMenu_SessionsMenuSimpsonHome>
	<SessionAtSimpsonHomeBegin parallel="true">
		<Action type="program">
			<Program><![CDATA[#program;
                    var object = Script::getObjectInstance();
                    var name = Object::getProperty(object, 'Name');
                    var sessionCharacters = 'Obj_SimpsonHome_Sessions_Characters';
                    
                    var hook = 'Music_Hooks';
                    Hook::load(hook,false);
                    var compiledHook = Parser::compile(Hook::toString(hook+':AddCharacterToSessionList'));
                    Hook::unload(hook,false);
                    
                    Parser::evaluate(compiledHook);
                    
                ]]></Program>
		</Action>
		<Action type="setVariable" intVariable="Session_SimpsonHomeNumCharacters" intValue="Session_SimpsonHomeNumCharacters+1" />
		<Action type="runScript" script="Music_Scripts:RefreshFestivalFanLocations" />
	</SessionAtSimpsonHomeBegin>
	<SessionAtSimpsonHomeDone parallel="true">
		<Action type="program">
			<Program><![CDATA[
                    var object = Script::getObjectInstance();
                    var name = Object::getProperty(object, 'Name');
                    var location = 'Simpson Home';
                    
                    var hook = 'Music_Hooks';
                    Hook::load(hook,false);
                    var compiledHook = Parser::compile(Hook::toString(hook+':CalculateLevelPoints'));
                    Hook::unload(hook,false);
                    
                    Parser::evaluate(compiledHook);
                    
                    for(var i = 0; i < 4; i++)
                    {
                        Object::setVariableForAdHoc('Obj_SimpsonHome_Sessions_Characters', toString(i), '0', 0, false);
                    }
                ]]></Program>
		</Action>
		<Action type="if">
			<If>
				<Requirement type="formula" formula="Session_SimpsonHomeReward &gt; 0" />
				<Then>
					<Action type="logevent" eventId="9507" param1Type="Enumeration" param1="Simpson Home" param2Type="Enumeration" param2AsFormula="Session_SimpsonHomeNumCharacters" param3Type="Enumeration" param3AsFormula="Session_SimpsonHomeReward" />
					<Action type="reward" Music_ActivePrizeTrackCurrency="Session_SimpsonHomeReward" />
					<Action type="setVariable" intVariable="Session_SimpsonHomeReward" intValue="0" />
					<Action type="setVariable" intVariable="Session_SimpsonHomeNumCharacters" intValue="0" />
					<Action type="if">
						<If>
							<Requirement type="formula" formula="lessThan(Session_SimpsonHomeCurrentSession, Session_SimpsonHomeSessions-1)" />
							<Then>
								<Action type="setVariable" intVariable="Session_SimpsonHomeCurrentSession" intValue="Session_SimpsonHomeCurrentSession+1" />
							</Then>
						</If>
						<Else>
							<Then>
								<Action type="setVariable" intVariable="Session_SimpsonHomeCurrentSession" intValue="0" />
							</Then>
						</Else>
					</Action>
					<Action type="runScript" script="Music_Scripts:RefreshFestivalFanLocations" />
					<Action type="sound" sound="sfx_Music_Cheering_Crowd_Tap.caf" />
				</Then>
			</If>
		</Action>
	</SessionAtSimpsonHomeDone>
	<OpenMenu_SessionsMenuMoesTavern ignoreHUD="true">
		<Action type="gotoState" state="GameState_JobSelection">
			<Extras>
				<Attribute name="menu" value="MonsterBattleHUB" />
				<Attribute name="scriptResProvider" value="MonsterBattleHUB.mns" />
				<Attribute name="menuConfig" value="Music_MenuConfig_Sessions:MenuConfig" />
				<Attribute name="buttonsConfig" value="Music_MenuConfig_Sessions:ButtonConfig" />
				<Attribute name="generalConfig" value="Music_MenuConfig_Sessions:SessionsMoesTavern" />
				<Attribute name="jobListConfig" value="Music_MenuConfig_Sessions:JobListMoesTavern" />
				<Attribute name="baseRewardPath" value="Music_MenuConfig_Sessions:RewardValue" />
				<Attribute name="autoSlotCharacterID" value="AutoSlotCharacterID" />
				<Attribute name="specialEvent" value="Music_Event" />
			</Extras>
			<Objects>
				<ObjectByUID UID="CurrentSessionBuildingServerID" land="local">
					<CopyObject index="0" />
				</ObjectByUID>
			</Objects>
		</Action>
	</OpenMenu_SessionsMenuMoesTavern>
	<SessionAtMoesBegin parallel="true">
		<Action type="program">
			<Program><![CDATA[#program;
                    var object = Script::getObjectInstance();
                    var name = Object::getProperty(object, 'Name');
                    var sessionCharacters = 'Obj_MoesTavern_Sessions_Characters';
                    
                    var hook = 'Music_Hooks';
                    Hook::load(hook,false);
                    var compiledHook = Parser::compile(Hook::toString(hook+':AddCharacterToSessionList'));
                    Hook::unload(hook,false);
                    
                    Parser::evaluate(compiledHook);
                    
                ]]></Program>
		</Action>
		<Action type="setVariable" intVariable="Session_MoesNumCharacters" intValue="Session_MoesNumCharacters+1" />
		<Action type="runScript" script="Music_Scripts:RefreshFestivalFanLocations" />
	</SessionAtMoesBegin>
	<SessionAtMoesDone parallel="true">
		<Action type="program">
			<Program><![CDATA[
                    var object = Script::getObjectInstance();
                    var name = Object::getProperty(object, 'Name');
                    var location = 'Moes Tavern';
                    
                    var hook = 'Music_Hooks';
                    Hook::load(hook,false);
                    var compiledHook = Parser::compile(Hook::toString(hook+':CalculateLevelPoints'));
                    Hook::unload(hook,false);
                    
                    Parser::evaluate(compiledHook);
                    
                    for(var i = 0; i < 4; i++)
                    {
                        Object::setVariableForAdHoc('Obj_MoesTavern_Sessions_Characters', toString(i), '0', 0, false);
                    }
                ]]></Program>
		</Action>
		<Action type="if">
			<If>
				<Requirement type="formula" formula="Session_MoesReward &gt; 0" />
				<Then>
					<Action type="logevent" eventId="9507" param1Type="Enumeration" param1="Moes Tavern" param2Type="Enumeration" param2AsFormula="Session_MoesNumCharacters" param3Type="Enumeration" param3AsFormula="Session_MoesReward" />
					<Action type="reward" Music_ActivePrizeTrackCurrency="Session_MoesReward" />
					<Action type="setVariable" intVariable="Session_MoesReward" intValue="0" />
					<Action type="setVariable" intVariable="Session_MoesNumCharacters" intValue="0" />
					<Action type="if">
						<If>
							<Requirement type="formula" formula="lessThan(Session_MoesCurrentSession, Session_MoesSessions-1)" />
							<Then>
								<Action type="setVariable" intVariable="Session_MoesCurrentSession" intValue="Session_MoesCurrentSession+1" />
							</Then>
						</If>
						<Else>
							<Then>
								<Action type="setVariable" intVariable="Session_MoesCurrentSession" intValue="0" />
							</Then>
						</Else>
					</Action>
					<Action type="runScript" script="Music_Scripts:RefreshFestivalFanLocations" />
					<Action type="sound" sound="sfx_Music_Cheering_Crowd_Tap.caf" />
				</Then>
			</If>
		</Action>
	</SessionAtMoesDone>
	<OpenMenu_SessionsMenuKwikEMart ignoreHUD="true">
		<Action type="gotoState" state="GameState_JobSelection">
			<Extras>
				<Attribute name="menu" value="MonsterBattleHUB" />
				<Attribute name="scriptResProvider" value="MonsterBattleHUB.mns" />
				<Attribute name="menuConfig" value="Music_MenuConfig_Sessions:MenuConfig" />
				<Attribute name="buttonsConfig" value="Music_MenuConfig_Sessions:ButtonConfig" />
				<Attribute name="generalConfig" value="Music_MenuConfig_Sessions:SessionsKwikEMart" />
				<Attribute name="jobListConfig" value="Music_MenuConfig_Sessions:JobListKwikEMart" />
				<Attribute name="baseRewardPath" value="Music_MenuConfig_Sessions:RewardValue" />
				<Attribute name="autoSlotCharacterID" value="AutoSlotCharacterID" />
				<Attribute name="specialEvent" value="Music_Event" />
			</Extras>
			<Objects>
				<ObjectByUID UID="CurrentSessionBuildingServerID" land="local">
					<CopyObject index="0" />
				</ObjectByUID>
			</Objects>
		</Action>
	</OpenMenu_SessionsMenuKwikEMart>
	<SessionAtKwikEMartBegin parallel="true">
		<Action type="program">
			<Program><![CDATA[#program;
                    var object = Script::getObjectInstance();
                    var name = Object::getProperty(object, 'Name');
                    var sessionCharacters = 'Obj_KwikEMart_Sessions_Characters';
                    
                    var hook = 'Music_Hooks';
                    Hook::load(hook,false);
                    var compiledHook = Parser::compile(Hook::toString(hook+':AddCharacterToSessionList'));
                    Hook::unload(hook,false);
                    
                    Parser::evaluate(compiledHook);
                    
                ]]></Program>
		</Action>
		<Action type="setVariable" intVariable="Session_KwikEMartNumCharacters" intValue="Session_KwikEMartNumCharacters+1" />
		<Action type="runScript" script="Music_Scripts:RefreshFestivalFanLocations" />
	</SessionAtKwikEMartBegin>
	<SessionAtKwikEMartDone parallel="true">
		<Action type="program">
			<Program><![CDATA[
                    var object = Script::getObjectInstance();
                    var name = Object::getProperty(object, 'Name');
                    var location = 'Kwik-E-Mart';
                    
                    var hook = 'Music_Hooks';
                    Hook::load(hook,false);
                    var compiledHook = Parser::compile(Hook::toString(hook+':CalculateLevelPoints'));
                    Hook::unload(hook,false);
                    
                    Parser::evaluate(compiledHook);
                    
                    for(var i = 0; i < 4; i++)
                    {
                        Object::setVariableForAdHoc('Obj_KwikEMart_Sessions_Characters', toString(i), '0', 0, false);
                    }
                    
                ]]></Program>
		</Action>
		<Action type="if">
			<If>
				<Requirement type="formula" formula="Session_KwikEMartReward &gt; 0" />
				<Then>
					<Action type="logevent" eventId="9507" param1Type="Enumeration" param1="Kwik-E-Mart" param2Type="Enumeration" param2AsFormula="Session_KwikEMartNumCharacters" param3Type="Enumeration" param3AsFormula="Session_KwikEMartReward" />
					<Action type="reward" Music_ActivePrizeTrackCurrency="Session_KwikEMartReward" />
					<Action type="setVariable" intVariable="Session_KwikEMartReward" intValue="0" />
					<Action type="setVariable" intVariable="Session_KwikEMartNumCharacters" intValue="0" />
					<Action type="if">
						<If>
							<Requirement type="formula" formula="lessThan(Session_KwikEMartCurrentSession,Session_KwikEMartSessions-1)" />
							<Then>
								<Action type="setVariable" intVariable="Session_KwikEMartCurrentSession" intValue="Session_KwikEMartCurrentSession+1" />
							</Then>
						</If>
						<Else>
							<Then>
								<Action type="setVariable" intVariable="Session_KwikEMartCurrentSession" intValue="0" />
							</Then>
						</Else>
					</Action>
					<Action type="runScript" script="Music_Scripts:RefreshFestivalFanLocations" />
					<Action type="sound" sound="sfx_Music_Cheering_Crowd_Tap.caf" />
				</Then>
			</If>
		</Action>
	</SessionAtKwikEMartDone>
	<OpenMenu_SessionsMenuKrustyBurger ignoreHUD="true">
		<Action type="gotoState" state="GameState_JobSelection">
			<Extras>
				<Attribute name="menu" value="MonsterBattleHUB" />
				<Attribute name="scriptResProvider" value="MonsterBattleHUB.mns" />
				<Attribute name="menuConfig" value="Music_MenuConfig_Sessions:MenuConfig" />
				<Attribute name="buttonsConfig" value="Music_MenuConfig_Sessions:ButtonConfig" />
				<Attribute name="generalConfig" value="Music_MenuConfig_Sessions:SessionsKrustyBurger" />
				<Attribute name="jobListConfig" value="Music_MenuConfig_Sessions:JobListKrustyBurger" />
				<Attribute name="baseRewardPath" value="Music_MenuConfig_Sessions:RewardValue" />
				<Attribute name="autoSlotCharacterID" value="AutoSlotCharacterID" />
				<Attribute name="specialEvent" value="Music_Event" />
			</Extras>
			<Objects>
				<ObjectByUID UID="CurrentSessionBuildingServerID" land="local">
					<CopyObject index="0" />
				</ObjectByUID>
			</Objects>
		</Action>
	</OpenMenu_SessionsMenuKrustyBurger>
	<SessionAtKrustyBurgerBegin parallel="true">
		<Action type="program">
			<Program><![CDATA[#program;
                    var object = Script::getObjectInstance();
                    var name = Object::getProperty(object, 'Name');
                    var sessionCharacters = 'Obj_KrustyBurger_Sessions_Characters';
                    
                    var hook = 'Music_Hooks';
                    Hook::load(hook,false);
                    var compiledHook = Parser::compile(Hook::toString(hook+':AddCharacterToSessionList'));
                    Hook::unload(hook,false);
                    
                    Parser::evaluate(compiledHook);
                    
                ]]></Program>
		</Action>
		<Action type="setVariable" intVariable="Session_KrustyBurgerNumCharacters" intValue="Session_KrustyBurgerNumCharacters+1" />
		<Action type="runScript" script="Music_Scripts:RefreshFestivalFanLocations" />
	</SessionAtKrustyBurgerBegin>
	<SessionAtKrustyBurgerDone parallel="true">
		<Action type="program">
			<Program><![CDATA[
                    var object = Script::getObjectInstance();
                    var name = Object::getProperty(object, 'Name');
                    var location = 'Kursty Burger';
                    
                    var hook = 'Music_Hooks';
                    Hook::load(hook,false);
                    var compiledHook = Parser::compile(Hook::toString(hook+':CalculateLevelPoints'));
                    Hook::unload(hook,false);
                    
                    Parser::evaluate(compiledHook);
                    
                    for(var i = 0; i < 4; i++)
                    {
                        Object::setVariableForAdHoc('Obj_KrustyBurger_Sessions_Characters', toString(i), '0', 0, false);
                    }
                ]]></Program>
		</Action>
		<Action type="if">
			<If>
				<Requirement type="formula" formula="Session_KrustyBurgerReward &gt; 0" />
				<Then>
					<Action type="logevent" eventId="9507" param1Type="Enumeration" param1="Krusty Burger" param2Type="Enumeration" param2AsFormula="Session_KrustyBurgerNumCharacters" param3Type="Enumeration" param3AsFormula="Session_KrustyBurgerReward" />
					<Action type="reward" Music_ActivePrizeTrackCurrency="Session_KrustyBurgerReward" />
					<Action type="setVariable" intVariable="Session_KrustyBurgerReward" intValue="0" />
					<Action type="setVariable" intVariable="Session_KrustyBurgerNumCharacters" intValue="0" />
					<Action type="if">
						<If>
							<Requirement type="formula" formula="lessThan(Session_KrustyBurgerCurrentSession,Session_KrustyBurgerSessions-1)" />
							<Then>
								<Action type="setVariable" intVariable="Session_KrustyBurgerCurrentSession" intValue="Session_KrustyBurgerCurrentSession+1" />
							</Then>
						</If>
						<Else>
							<Then>
								<Action type="setVariable" intVariable="Session_KrustyBurgerCurrentSession" intValue="0" />
							</Then>
						</Else>
					</Action>
					<Action type="runScript" script="Music_Scripts:RefreshFestivalFanLocations" />
					<Action type="sound" sound="sfx_Music_Cheering_Crowd_Tap.caf" />
				</Then>
			</If>
		</Action>
	</SessionAtKrustyBurgerDone>
	<OpenMenu_SessionsMenuSpringfieldElementary ignoreHUD="true">
		<Action type="gotoState" state="GameState_JobSelection">
			<Extras>
				<Attribute name="menu" value="MonsterBattleHUB" />
				<Attribute name="scriptResProvider" value="MonsterBattleHUB.mns" />
				<Attribute name="menuConfig" value="Music_MenuConfig_Sessions:MenuConfig" />
				<Attribute name="buttonsConfig" value="Music_MenuConfig_Sessions:ButtonConfig" />
				<Attribute name="generalConfig" value="Music_MenuConfig_Sessions:SessionsSpringfieldElementary" />
				<Attribute name="jobListConfig" value="Music_MenuConfig_Sessions:JobListSpringfieldElementary" />
				<Attribute name="baseRewardPath" value="Music_MenuConfig_Sessions:RewardValue" />
				<Attribute name="autoSlotCharacterID" value="AutoSlotCharacterID" />
				<Attribute name="specialEvent" value="Music_Event" />
			</Extras>
			<Objects>
				<ObjectByUID UID="CurrentSessionBuildingServerID" land="local">
					<CopyObject index="0" />
				</ObjectByUID>
			</Objects>
		</Action>
	</OpenMenu_SessionsMenuSpringfieldElementary>
	<SessionAtSpringfieldElementaryBegin parallel="true">
		<Action type="program">
			<Program><![CDATA[#program;
                    var object = Script::getObjectInstance();
                    var name = Object::getProperty(object, 'Name');
                    var sessionCharacters = 'Obj_SpringfieldElementary_Sessions_Characters';
                    
                    var hook = 'Music_Hooks';
                    Hook::load(hook,false);
                    var compiledHook = Parser::compile(Hook::toString(hook+':AddCharacterToSessionList'));
                    Hook::unload(hook,false);
                    
                    Parser::evaluate(compiledHook);
                    
                ]]></Program>
		</Action>
		<Action type="setVariable" intVariable="Session_SpringfieldElementaryNumCharacters" intValue="Session_SpringfieldElementaryNumCharacters+1" />
		<Action type="runScript" script="Music_Scripts:RefreshFestivalFanLocations" />
	</SessionAtSpringfieldElementaryBegin>
	<SessionAtSpringfieldElementaryDone parallel="true">
		<Action type="program">
			<Program><![CDATA[
                    var object = Script::getObjectInstance();
                    var name = Object::getProperty(object, 'Name');
                    var location = 'Springfield Elementary';
                    
                    var hook = 'Music_Hooks';
                    Hook::load(hook,false);
                    var compiledHook = Parser::compile(Hook::toString(hook+':CalculateLevelPoints'));
                    Hook::unload(hook,false);
                    
                    Parser::evaluate(compiledHook);
                    
                    for(var i = 0; i < 4; i++)
                    {
                        Object::setVariableForAdHoc('Obj_SpringfieldElementary_Sessions_Characters', toString(i), '0', 0, false);
                    }
                    ]]></Program>
		</Action>
		<Action type="if">
			<If>
				<Requirement type="formula" formula="Session_SpringfieldElementaryReward &gt; 0" />
				<Then>
					<Action type="logevent" eventId="9507" param1Type="Enumeration" param1="Springfield Elementary" param2Type="Enumeration" param2AsFormula="Session_SpringfieldElementaryNumCharacters" param3Type="Enumeration" param3AsFormula="Session_SpringfieldElementaryReward" />
					<Action type="reward" Music_ActivePrizeTrackCurrency="Session_SpringfieldElementaryReward" />
					<Action type="setVariable" intVariable="Session_SpringfieldElementaryReward" intValue="0" />
					<Action type="setVariable" intVariable="Session_SpringfieldElementaryNumCharacters" intValue="0" />
					<Action type="if">
						<If>
							<Requirement type="formula" formula="lessThan(Session_SpringfieldElementaryCurrentSession,Session_SpringfieldElementarySessions-1)" />
							<Then>
								<Action type="setVariable" intVariable="Session_SpringfieldElementaryCurrentSession" intValue="Session_SpringfieldElementaryCurrentSession+1" />
							</Then>
						</If>
						<Else>
							<Then>
								<Action type="setVariable" intVariable="Session_SpringfieldElementaryCurrentSession" intValue="0" />
							</Then>
						</Else>
					</Action>
					<Action type="runScript" script="Music_Scripts:RefreshFestivalFanLocations" />
					<Action type="sound" sound="sfx_Music_Cheering_Crowd_Tap.caf" />
				</Then>
			</If>
		</Action>
	</SessionAtSpringfieldElementaryDone>
	<OpenMenu_SessionsMenuPopStage ignoreHUD="true">
		<Action type="gotoState" state="GameState_JobSelection">
			<Extras>
				<Attribute name="menu" value="MonsterBattleHUB" />
				<Attribute name="scriptResProvider" value="MonsterBattleHUB.mns" />
				<Attribute name="menuConfig" value="Music_MenuConfig_Sessions:MenuConfig" />
				<Attribute name="buttonsConfig" value="Music_MenuConfig_Sessions:ButtonConfig" />
				<Attribute name="generalConfig" value="Music_MenuConfig_Sessions:SessionsPopStage" />
				<Attribute name="jobListConfig" value="Music_MenuConfig_Sessions:JobListPopStage" />
				<Attribute name="baseRewardPath" value="Music_MenuConfig_Sessions:RewardValue" />
				<Attribute name="autoSlotCharacterID" value="AutoSlotCharacterID" />
				<Attribute name="specialEvent" value="Music_Event" />
			</Extras>
			<Objects>
				<ObjectByUID UID="CurrentSessionBuildingServerID" land="local">
					<CopyObject index="0" />
				</ObjectByUID>
			</Objects>
		</Action>
	</OpenMenu_SessionsMenuPopStage>
	<SessionAtPopStageBegin parallel="true">
		<Action type="program">
			<Program><![CDATA[#program;
                    var object = Script::getObjectInstance();
                    var name = Object::getProperty(object, 'Name');
                    var sessionCharacters = 'Obj_PopStage_Sessions_Characters';
                    
                    var hook = 'Music_Hooks';
                    Hook::load(hook,false);
                    var compiledHook = Parser::compile(Hook::toString(hook+':AddCharacterToSessionList'));
                    Hook::unload(hook,false);
                    
                    Parser::evaluate(compiledHook);
                    
                ]]></Program>
		</Action>
		<Action type="setVariable" intVariable="Session_PopStageNumCharacters" intValue="Session_PopStageNumCharacters+1" />
		<Action type="runScript" script="Music_Scripts:RefreshFestivalFanLocations" />
	</SessionAtPopStageBegin>
	<SessionAtPopStageDone parallel="true">
		<Action type="program">
			<Program><![CDATA[
                    var object = Script::getObjectInstance();
                    var name = Object::getProperty(object, 'Name');
                    var location = 'Pop Stage';
                    
                    var hook = 'Music_Hooks';
                    Hook::load(hook,false);
                    var compiledHook = Parser::compile(Hook::toString(hook+':CalculateLevelPoints'));
                    Hook::unload(hook,false);
                    
                    Parser::evaluate(compiledHook);
                    
                    for(var i = 0; i < 4; i++)
                    {
                        Object::setVariableForAdHoc('Obj_PopStage_Sessions_Characters', toString(i), '0', 0, false);
                    }
                ]]></Program>
		</Action>
		<Action type="if">
			<If>
				<Requirement type="formula" formula="Session_PopStageReward &gt; 0" />
				<Then>
					<Action type="logevent" eventId="9507" param1Type="Enumeration" param1="Pop Stage" param2Type="Enumeration" param2AsFormula="Session_PopStageNumCharacters" param3Type="Enumeration" param3AsFormula="Session_PopStageReward" />
					<Action type="reward" Music_ActivePrizeTrackCurrency="Session_PopStageReward" />
					<Action type="setVariable" intVariable="Session_PopStageReward" intValue="0" />
					<Action type="setVariable" intVariable="Session_PopStageNumCharacters" intValue="0" />
					<Action type="if">
						<If>
							<Requirement type="formula" formula="lessThan(Session_PopStageCurrentSession,Session_PopStageSessions-1)" />
							<Then>
								<Action type="setVariable" intVariable="Session_PopStageCurrentSession" intValue="Session_PopStageCurrentSession+1" />
							</Then>
						</If>
						<Else>
							<Then>
								<Action type="setVariable" intVariable="Session_PopStageCurrentSession" intValue="0" />
							</Then>
						</Else>
					</Action>
					<Action type="runScript" script="Music_Scripts:RefreshFestivalFanLocations" />
					<Action type="sound" sound="sfx_sports_crowd_cheer_01.caf" />
				</Then>
			</If>
		</Action>
	</SessionAtPopStageDone>
	<OpenMenu_SessionsMenuRockStage ignoreHUD="true">
		<Action type="gotoState" state="GameState_JobSelection">
			<Extras>
				<Attribute name="menu" value="MonsterBattleHUB" />
				<Attribute name="scriptResProvider" value="MonsterBattleHUB.mns" />
				<Attribute name="menuConfig" value="Music_MenuConfig_Sessions:MenuConfig" />
				<Attribute name="buttonsConfig" value="Music_MenuConfig_Sessions:ButtonConfig" />
				<Attribute name="generalConfig" value="Music_MenuConfig_Sessions:SessionsRockStage" />
				<Attribute name="jobListConfig" value="Music_MenuConfig_Sessions:JobListRockStage" />
				<Attribute name="baseRewardPath" value="Music_MenuConfig_Sessions:RewardValue" />
				<Attribute name="autoSlotCharacterID" value="AutoSlotCharacterID" />
				<Attribute name="specialEvent" value="Music_Event" />
			</Extras>
			<Objects>
				<ObjectByUID UID="CurrentSessionBuildingServerID" land="local">
					<CopyObject index="0" />
				</ObjectByUID>
			</Objects>
		</Action>
	</OpenMenu_SessionsMenuRockStage>
	<SessionAtRockStageBegin parallel="true">
		<Action type="program">
			<Program><![CDATA[#program;
                    var object = Script::getObjectInstance();
                    var name = Object::getProperty(object, 'Name');
                    var sessionCharacters = 'Obj_RockStage_Sessions_Characters';
                    
                    var hook = 'Music_Hooks';
                    Hook::load(hook,false);
                    var compiledHook = Parser::compile(Hook::toString(hook+':AddCharacterToSessionList'));
                    Hook::unload(hook,false);
                    
                    Parser::evaluate(compiledHook);
                    
                ]]></Program>
		</Action>
		<Action type="setVariable" intVariable="Session_RockStageNumCharacters" intValue="Session_RockStageNumCharacters+1" />
		<Action type="runScript" script="Music_Scripts:RefreshFestivalFanLocations" />
	</SessionAtRockStageBegin>
	<SessionAtRockStageDone parallel="true">
		<Action type="program">
			<Program><![CDATA[
                    var object = Script::getObjectInstance();
                    var name = Object::getProperty(object, 'Name');
                    var location = 'Rock Stage';
                    
                    var hook = 'Music_Hooks';
                    Hook::load(hook,false);
                    var compiledHook = Parser::compile(Hook::toString(hook+':CalculateLevelPoints'));
                    Hook::unload(hook,false);
                    
                    Parser::evaluate(compiledHook);
                    
                    for(var i = 0; i < 4; i++)
                    {
                        Object::setVariableForAdHoc('Obj_RockStage_Sessions_Characters', toString(i), '0', 0, false);
                    }
                ]]></Program>
		</Action>
		<Action type="if">
			<If>
				<Requirement type="formula" formula="Session_RockStageReward &gt; 0" />
				<Then>
					<Action type="logevent" eventId="9507" param1Type="Enumeration" param1="Rock Stage" param2Type="Enumeration" param2AsFormula="Session_RockStageNumCharacters" param3Type="Enumeration" param3AsFormula="Session_RockStageReward" />
					<Action type="reward" Music_ActivePrizeTrackCurrency="Session_RockStageReward" />
					<Action type="setVariable" intVariable="Session_RockStageReward" intValue="0" />
					<Action type="setVariable" intVariable="Session_RockStageNumCharacters" intValue="0" />
					<Action type="if">
						<If>
							<Requirement type="formula" formula="lessThan(Session_RockStageCurrentSession,Session_RockStageSessions-1)" />
							<Then>
								<Action type="setVariable" intVariable="Session_RockStageCurrentSession" intValue="Session_RockStageCurrentSession+1" />
							</Then>
						</If>
						<Else>
							<Then>
								<Action type="setVariable" intVariable="Session_RockStageCurrentSession" intValue="0" />
							</Then>
						</Else>
					</Action>
					<Action type="runScript" script="Music_Scripts:RefreshFestivalFanLocations" />
					<Action type="sound" sound="sfx_sports_crowd_cheer_01.caf" />
				</Then>
			</If>
		</Action>
	</SessionAtRockStageDone>
	<OpenMenu_SessionsMenuHipHopStage ignoreHUD="true">
		<Action type="gotoState" state="GameState_JobSelection">
			<Extras>
				<Attribute name="menu" value="MonsterBattleHUB" />
				<Attribute name="scriptResProvider" value="MonsterBattleHUB.mns" />
				<Attribute name="menuConfig" value="Music_MenuConfig_Sessions:MenuConfig" />
				<Attribute name="buttonsConfig" value="Music_MenuConfig_Sessions:ButtonConfig" />
				<Attribute name="generalConfig" value="Music_MenuConfig_Sessions:SessionsHipHopStage" />
				<Attribute name="jobListConfig" value="Music_MenuConfig_Sessions:JobListHipHopStage" />
				<Attribute name="baseRewardPath" value="Music_MenuConfig_Sessions:RewardValue" />
				<Attribute name="autoSlotCharacterID" value="AutoSlotCharacterID" />
				<Attribute name="specialEvent" value="Music_Event" />
			</Extras>
			<Objects>
				<ObjectByUID UID="CurrentSessionBuildingServerID" land="local">
					<CopyObject index="0" />
				</ObjectByUID>
			</Objects>
		</Action>
	</OpenMenu_SessionsMenuHipHopStage>
	<SessionAtHipHopStageBegin parallel="true">
		<Action type="program">
			<Program><![CDATA[#program;
                    var object = Script::getObjectInstance();
                    var name = Object::getProperty(object, 'Name');
                    var sessionCharacters = 'Obj_HipHopStage_Sessions_Characters';
                    
                    var hook = 'Music_Hooks';
                    Hook::load(hook,false);
                    var compiledHook = Parser::compile(Hook::toString(hook+':AddCharacterToSessionList'));
                    Hook::unload(hook,false);
                    
                    Parser::evaluate(compiledHook);
                    
                ]]></Program>
		</Action>
		<Action type="setVariable" intVariable="Session_HipHopStageNumCharacters" intValue="Session_HipHopStageNumCharacters+1" />
		<Action type="runScript" script="Music_Scripts:RefreshFestivalFanLocations" />
	</SessionAtHipHopStageBegin>
	<SessionAtHipHopStageDone parallel="true">
		<Action type="program">
			<Program><![CDATA[
                    var object = Script::getObjectInstance();
                    var name = Object::getProperty(object, 'Name');
                    var location = 'Hip Hop Stage';
                    
                    var hook = 'Music_Hooks';
                    Hook::load(hook,false);
                    var compiledHook = Parser::compile(Hook::toString(hook+':CalculateLevelPoints'));
                    Hook::unload(hook,false);
                    
                    Parser::evaluate(compiledHook);
                    
                    for(var i = 0; i < 4; i++)
                    {
                        Object::setVariableForAdHoc('Obj_HipHopStage_Sessions_Characters', toString(i), '0', 0, false);
                    }
                ]]></Program>
		</Action>
		<Action type="if">
			<If>
				<Requirement type="formula" formula="Session_HipHopStageReward &gt; 0" />
				<Then>
					<Action type="logevent" eventId="9507" param1Type="Enumeration" param1="Hip Hop Stage" param2Type="Enumeration" param2AsFormula="Session_HipHopStageNumCharacters" param3Type="Enumeration" param3AsFormula="Session_HipHopStageReward" />
					<Action type="reward" Music_ActivePrizeTrackCurrency="Session_HipHopStageReward" />
					<Action type="setVariable" intVariable="Session_HipHopStageReward" intValue="0" />
					<Action type="setVariable" intVariable="Session_HipHopNumCharacters" intValue="0" />
					<Action type="if">
						<If>
							<Requirement type="formula" formula="lessThan(Session_HipHopStageCurrentSession,Session_HipHopStageSessions-1)" />
							<Then>
								<Action type="setVariable" intVariable="Session_HipHopStageCurrentSession" intValue="Session_HipHopStageCurrentSession+1" />
							</Then>
						</If>
						<Else>
							<Then>
								<Action type="setVariable" intVariable="Session_HipHopStageCurrentSession" intValue="0" />
							</Then>
						</Else>
					</Action>
					<Action type="runScript" script="Music_Scripts:RefreshFestivalFanLocations" />
					<Action type="sound" sound="sfx_sports_crowd_cheer_01.caf" />
				</Then>
			</If>
		</Action>
	</SessionAtHipHopStageDone>
	<Tab_Sessions ignoreHUD="true">
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<False>
				<Action type="gotoland" land="Springfield" showPopup="true" />
			</False>
			<True>
				<Action type="runScript" script="Music_Scripts:ResetSessionsLocationList" />
				<Action type="setVariable" intVariable="Music_EventHubTabValue" intValue="1" />
				<Action type="if">
					<If>
						<Requirements>
							<Requirement type="conditional" logic="OR">
								<Requirement type="variable" variable="Music_Badge_ReadyToCollect_RockStage" />
								<Requirement type="variable" variable="Music_Badge_CanStart_RockStage" />
							</Requirement>
						</Requirements>
						<Then>
							<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
								<FormatToken key="thisLocationCounter" value="_[System::evaluate('Building::RockStage::Object::Counter')]_" />
							</Action>
							<Action type="actionSequence" script="Music_Scripts:SelectSessionsLocation" parseOnDemand="true" />
						</Then>
					</If>
					<ElseIf>
						<Requirements>
							<Requirement type="conditional" logic="OR">
								<Requirement type="variable" variable="Music_Badge_ReadyToCollect_PopStage" />
								<Requirement type="variable" variable="Music_Badge_CanStart_PopStage" />
							</Requirement>
						</Requirements>
						<Then>
							<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
								<FormatToken key="thisLocationCounter" value="_[System::evaluate('Building::PopStage::Object::Counter')]_" />
							</Action>
							<Action type="actionSequence" script="Music_Scripts:SelectSessionsLocation" parseOnDemand="true" />
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirements>
							<Requirement type="conditional" logic="OR">
								<Requirement type="variable" variable="Music_Badge_ReadyToCollect_HipHopStage" />
								<Requirement type="variable" variable="Music_Badge_CanStart_HipHopStage" />
							</Requirement>
						</Requirements>
						<Then>
							<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
								<FormatToken key="thisLocationCounter" value="_[System::evaluate('Building::HipHopStage::Object::Counter')]_" />
							</Action>
							<Action type="actionSequence" script="Music_Scripts:SelectSessionsLocation" parseOnDemand="true" />
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirements>
							<Requirement type="conditional" logic="OR">
								<Requirement type="variable" variable="Music_Badge_ReadyToCollect_SimpsonHome" />
								<Requirement type="variable" variable="Music_Badge_CanStart_SimpsonHome" />
							</Requirement>
						</Requirements>
						<Then>
							<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
								<FormatToken key="thisLocationCounter" value="_[System::evaluate('Building::SimpsonHome::Object::Counter')]_" />
							</Action>
							<Action type="actionSequence" script="Music_Scripts:SelectSessionsLocation" parseOnDemand="true" />
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirements>
							<Requirement type="conditional" logic="OR">
								<Requirement type="variable" variable="Music_Badge_ReadyToCollect_MoesTavern" />
								<Requirement type="variable" variable="Music_Badge_CanStart_MoesTavern" />
							</Requirement>
						</Requirements>
						<Then>
							<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
								<FormatToken key="thisLocationCounter" value="_[System::evaluate('Building::MoesTavern::Object::Counter')]_" />
							</Action>
							<Action type="actionSequence" script="Music_Scripts:SelectSessionsLocation" parseOnDemand="true" />
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirements>
							<Requirement type="conditional" logic="OR">
								<Requirement type="variable" variable="Music_Badge_ReadyToCollect_KwikEMart" />
								<Requirement type="variable" variable="Music_Badge_CanStart_KwikEMart" />
							</Requirement>
						</Requirements>
						<Then>
							<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
								<FormatToken key="thisLocationCounter" value="_[System::evaluate('Building::Kwik-E-Mart::Object::Counter')]_" />
							</Action>
							<Action type="actionSequence" script="Music_Scripts:SelectSessionsLocation" parseOnDemand="true" />
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirements>
							<Requirement type="conditional" logic="OR">
								<Requirement type="variable" variable="Music_Badge_ReadyToCollect_KrustyBurger" />
								<Requirement type="variable" variable="Music_Badge_CanStart_KrustyBurger" />
							</Requirement>
						</Requirements>
						<Then>
							<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
								<FormatToken key="thisLocationCounter" value="_[System::evaluate('Building::KrustyBurger::Object::Counter')]_" />
							</Action>
							<Action type="actionSequence" script="Music_Scripts:SelectSessionsLocation" parseOnDemand="true" />
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirements>
							<Requirement type="conditional" logic="OR">
								<Requirement type="variable" variable="Music_Badge_ReadyToCollect_SpringfieldElementary" />
								<Requirement type="variable" variable="Music_Badge_CanStart_SpringfieldElementary" />
							</Requirement>
						</Requirements>
						<Then>
							<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
								<FormatToken key="thisLocationCounter" value="_[System::evaluate('Building::SpringfieldElementary::Object::Counter')]_" />
							</Action>
							<Action type="actionSequence" script="Music_Scripts:SelectSessionsLocation" parseOnDemand="true" />
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtRockStage" />
						<Then>
							<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
								<FormatToken key="thisLocationCounter" value="_[System::evaluate('Building::RockStage::Object::Counter')]_" />
							</Action>
							<Action type="actionSequence" script="Music_Scripts:SelectSessionsLocation" parseOnDemand="true" />
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtPopStage" />
						<Then>
							<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
								<FormatToken key="thisLocationCounter" value="_[System::evaluate('Building::PopStage::Object::Counter')]_" />
							</Action>
							<Action type="actionSequence" script="Music_Scripts:SelectSessionsLocation" parseOnDemand="true" />
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtHipHopStage" />
						<Then>
							<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
								<FormatToken key="thisLocationCounter" value="_[System::evaluate('Building::HipHopStage::Object::Counter')]_" />
							</Action>
							<Action type="actionSequence" script="Music_Scripts:SelectSessionsLocation" parseOnDemand="true" />
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtSimpsonHome" />
						<Then>
							<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
								<FormatToken key="thisLocationCounter" value="_[System::evaluate('Building::SimpsonHome::Object::Counter')]_" />
							</Action>
							<Action type="actionSequence" script="Music_Scripts:SelectSessionsLocation" parseOnDemand="true" />
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtMoesTavern" />
						<Then>
							<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
								<FormatToken key="thisLocationCounter" value="_[System::evaluate('Building::MoesTavern::Object::Counter')]_" />
							</Action>
							<Action type="actionSequence" script="Music_Scripts:SelectSessionsLocation" parseOnDemand="true" />
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtKwikEMart" />
						<Then>
							<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
								<FormatToken key="thisLocationCounter" value="_[System::evaluate('Building::Kwik-E-Mart::Object::Counter')]_" />
							</Action>
							<Action type="actionSequence" script="Music_Scripts:SelectSessionsLocation" parseOnDemand="true" />
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtKrustyBurger" />
						<Then>
							<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
								<FormatToken key="thisLocationCounter" value="_[System::evaluate('Building::KrustyBurger::Object::Counter')]_" />
							</Action>
							<Action type="actionSequence" script="Music_Scripts:SelectSessionsLocation" parseOnDemand="true" />
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtSpringfieldElementary" />
						<Then>
							<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
								<FormatToken key="thisLocationCounter" value="_[System::evaluate('Building::SpringfieldElementary::Object::Counter')]_" />
							</Action>
							<Action type="actionSequence" script="Music_Scripts:SelectSessionsLocation" parseOnDemand="true" />
						</Then>
					</ElseIf>
					<Else>
						<Then>
							<Action type="gotoState" state="GameState_InGame" />
						</Then>
					</Else>
				</Action>
			</True>
		</Action>
	</Tab_Sessions>
	<Tab_SessionsGuidePanel>
		<Action type="setVariable" intVariable="Music_EventHubTabValue" intValue="1" />
		<Action type="actionSequence" script="Music_Scripts:GuidePanel_Event" />
	</Tab_SessionsGuidePanel>
	<SelectSessionsLocation parallel="true" otherScriptsCanRunOnObject="true">
		<Action type="actionSequence" script="Music_Scripts:UpdateSessionVars" />
		<Action type="pantoobject" time="0" UID="CurrentSessionBuildingServerID" />
		<Action type="if">
			<If expression="CurrentSessionBuildingID==1">
				<Then>
					<Action type="runScript" script="Music_Scripts:OpenMenu_SessionsMenuSimpsonHome" />
				</Then>
			</If>
			<ElseIf expression="CurrentSessionBuildingID==15">
				<Then>
					<Action type="runScript" script="Music_Scripts:OpenMenu_SessionsMenuMoesTavern" />
				</Then>
			</ElseIf>
			<ElseIf expression="CurrentSessionBuildingID==3">
				<Then>
					<Action type="runScript" script="Music_Scripts:OpenMenu_SessionsMenuKwikEMart" />
				</Then>
			</ElseIf>
			<ElseIf expression="CurrentSessionBuildingID==6">
				<Then>
					<Action type="runScript" script="Music_Scripts:OpenMenu_SessionsMenuKrustyBurger" />
				</Then>
			</ElseIf>
			<ElseIf expression="CurrentSessionBuildingID==4">
				<Then>
					<Action type="runScript" script="Music_Scripts:OpenMenu_SessionsMenuSpringfieldElementary" />
				</Then>
			</ElseIf>
			<ElseIf expression="CurrentSessionBuildingID==178001">
				<Then>
					<Action type="runScript" script="Music_Scripts:OpenMenu_SessionsMenuPopStage" />
				</Then>
			</ElseIf>
			<ElseIf expression="CurrentSessionBuildingID==178000">
				<Then>
					<Action type="runScript" script="Music_Scripts:OpenMenu_SessionsMenuRockStage" />
				</Then>
			</ElseIf>
			<ElseIf expression="CurrentSessionBuildingID==178002">
				<Then>
					<Action type="runScript" script="Music_Scripts:OpenMenu_SessionsMenuHipHopStage" />
				</Then>
			</ElseIf>
		</Action>
	</SelectSessionsLocation>
	<GoToBuildingSessionsUI parallel="true" otherScriptsCanRunOnObject="true">
		<Action type="runScript" script="Music_Scripts:ResetSessionsLocationList" />
		<Action type="updateVariable" disableEvents="true" variable="CurrentSessionBuildingServerID" value="Object::UID" />
		<Action type="updateVariable" disableEvents="true" variable="CurrentSessionBuildingID" value="Object::ID" />
		<Action type="setVariable" intVariable="Music_EventHubTabValue" intValue="1" />
		<Action type="pantoobject" time="0" UID="CurrentSessionBuildingServerID" />
		<Action type="actionSequence" script="Music_Scripts:GotoSpecificBuildingSessionsUI" parseOnDemand="true" />
	</GoToBuildingSessionsUI>
	<GotoSpecificBuildingSessionsUI parallel="true" otherScriptsCanRunOnObject="true">
		<Action type="actionSequence" script="Music_Scripts:UpdateSessionVars" />
		<Action type="if">
			<If expression="CurrentSessionBuildingID==1">
				<Then>
					<Action type="runScript" script="Music_Scripts:OpenMenu_SessionsMenuSimpsonHome" />
				</Then>
			</If>
			<ElseIf expression="CurrentSessionBuildingID==15">
				<Then>
					<Action type="runScript" script="Music_Scripts:OpenMenu_SessionsMenuMoesTavern" />
				</Then>
			</ElseIf>
			<ElseIf expression="CurrentSessionBuildingID==3">
				<Then>
					<Action type="runScript" script="Music_Scripts:OpenMenu_SessionsMenuKwikEMart" />
				</Then>
			</ElseIf>
			<ElseIf expression="CurrentSessionBuildingID==6">
				<Then>
					<Action type="runScript" script="Music_Scripts:OpenMenu_SessionsMenuKrustyBurger" />
				</Then>
			</ElseIf>
			<ElseIf expression="CurrentSessionBuildingID==4">
				<Then>
					<Action type="runScript" script="Music_Scripts:OpenMenu_SessionsMenuSpringfieldElementary" />
				</Then>
			</ElseIf>
			<ElseIf expression="CurrentSessionBuildingID==178001">
				<Then>
					<Action type="runScript" script="Music_Scripts:OpenMenu_SessionsMenuPopStage" />
				</Then>
			</ElseIf>
			<ElseIf expression="CurrentSessionBuildingID==178000">
				<Then>
					<Action type="runScript" script="Music_Scripts:OpenMenu_SessionsMenuRockStage" />
				</Then>
			</ElseIf>
			<ElseIf expression="CurrentSessionBuildingID==178002">
				<Then>
					<Action type="runScript" script="Music_Scripts:OpenMenu_SessionsMenuHipHopStage" />
				</Then>
			</ElseIf>
		</Action>
	</GotoSpecificBuildingSessionsUI>
	<NextBuildingSelected parallel="true">
		<Action type="sound" sound="UIButton" />
		<Action type="if">
			<If expression="SessionsBuildingCounter &lt; NumSessionsBuildings-1">
				<Then>
					<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
						<FormatToken key="thisLocationCounter" value="_[SessionsBuildingCounter+1]_" />
					</Action>
				</Then>
			</If>
			<Else>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
						<FormatToken key="thisLocationCounter" value="_[0]_" />
					</Action>
				</Then>
			</Else>
		</Action>
		<Action type="actionSequence" script="Music_Scripts:SelectSessionsLocation" parseOnDemand="true" />
	</NextBuildingSelected>
	<PreviousBuildingSelected parallel="true">
		<Action type="sound" sound="UIButton" />
		<Action type="if">
			<If expression="SessionsBuildingCounter==0">
				<Then>
					<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
						<FormatToken key="thisLocationCounter" value="_[NumSessionsBuildings-1]_" />
					</Action>
				</Then>
			</If>
			<Else>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:SetSpecificBuilding" waitUntilComplete="true" parseOnDemand="true">
						<FormatToken key="thisLocationCounter" value="_[SessionsBuildingCounter-1]_" />
					</Action>
				</Then>
			</Else>
		</Action>
		<Action type="actionSequence" script="Music_Scripts:SelectSessionsLocation" parseOnDemand="true" />
	</PreviousBuildingSelected>
	<UpdateSessionVars cache="true">
		<Action type="updateVariable" variable="SessionsBuildingCounter" value="Object::Counter" asObjectExpression="true">
			<Objects>
				<ObjectByUID UID="CurrentSessionBuildingServerID" land="local" />
			</Objects>
		</Action>
	</UpdateSessionVars>
	<SetCounter cache="true">
		<Action type="setObjectVariable" variable="Counter" value="TEMP_SessionsBuildingCounter" allowOrphan="false" asExpression="true" />
		<Action type="setVariable" intVariable="TEMP_SessionsBuildingCounter" intValue="TEMP_SessionsBuildingCounter+1" />
	</SetCounter>
	<UpdateCurrentSessionBuildingID ignoreHUD="true">
		<Action type="updateVariable" variable="CurrentSessionBuildingID" value="Object::ID" asObjectExpression="true">
			<Objects>
				<ObjectByUID UID="CurrentSessionBuildingServerID" land="local" />
			</Objects>
		</Action>
	</UpdateCurrentSessionBuildingID>
	<SetSpecificBuilding parallel="true" cache="true">
		<Action type="updateVariable" variable="CurrentSessionBuildingServerID" value="Object::{thisLocationCounter}" asObjectExpression="true" formatMe="true">
			<Objects>
				<ObjectByName name="Obj_SessionsLocations" />
			</Objects>
		</Action>
		<Action type="actionSequence" script="Music_Scripts:UpdateCurrentSessionBuildingID" waitUntilComplete="true" parseOnDemand="true" />
	</SetSpecificBuilding>
	<LandLoad cache="true">
		<Action type="runScript" script="Music_Scripts:RefreshFestivalFanLocations" />
	</LandLoad>
	<RefreshFestivalFanLocations cache="true" parallel="true">
		<Action type="scheduleScript" mode="delete" script="Music_Scripts:RefreshFestivalFanLocations" />
		<Action type="actionSequence" script="Music_Scripts:FestivalFan_RecalcSessions" waitUntilComplete="true" ignoreErrors="true" />
		<Action type="if">
			<If>
				<Requirements>
					<Requirement type="formula" formula="User::getVariable('NumSessionLocationsActive') == 0" />
				</Requirements>
				<Then>
					<Action type="runScriptOnAll" character="FestivalFan" script="Music_Scripts:FestivalFan_RandomRelaxed" />
				</Then>
			</If>
			<Else>
				<Then>
					<Action type="runScriptOnAll" character="FestivalFan" script="Music_Scripts:FestivalFan_Crowd" />
				</Then>
			</Else>
		</Action>
	</RefreshFestivalFanLocations>
	<ResetSessionsLocationList parallel="true" cache="true">
		<Action type="program">
			<Program><![CDATA[
                    #program;
                    Script::run('Music_Scripts:RemoveFrontBuildingFromLocationList');
                    Script::run('Music_Scripts:RemoveFrontBuildingFromLocationList');
                    Script::run('Music_Scripts:RemoveFrontBuildingFromLocationList');
                    Script::run('Music_Scripts:RemoveFrontBuildingFromLocationList');
                    Script::run('Music_Scripts:RemoveFrontBuildingFromLocationList');
                    Script::run('Music_Scripts:RemoveFrontBuildingFromLocationList');
                    Script::run('Music_Scripts:RemoveFrontBuildingFromLocationList');
                    Script::run('Music_Scripts:RemoveFrontBuildingFromLocationList');
                    Script::run('Music_Scripts:ReAddBuildingsToLocationList');
                ]]></Program>
		</Action>
	</ResetSessionsLocationList>
	<RemoveFrontBuildingFromLocationList parallel="true" cache="true">
		<Action type="popFrontObjectVariable" disableEvents="true">
			<Objects>
				<ObjectByName name="Obj_SessionsLocations" land="local" />
			</Objects>
		</Action>
	</RemoveFrontBuildingFromLocationList>
	<ReAddBuildingsToLocationList>
		<Action type="setVariable" intVariable="NumSessionsBuildings" intValue="0" />
		<Action type="if">
			<If>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtRockStage" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:AddBuildingToLocationToList">
						<Objects>
							<ObjectByName name="RockStage" land="local" />
						</Objects>
					</Action>
					<Action type="setVariable" intVariable="NumSessionsBuildings" intValue="NumSessionsBuildings+1" />
				</Then>
			</If>
		</Action>
		<Action type="if">
			<If>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtPopStage" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:AddBuildingToLocationToList">
						<Objects>
							<ObjectByName name="PopStage" land="local" />
						</Objects>
					</Action>
					<Action type="setVariable" intVariable="NumSessionsBuildings" intValue="NumSessionsBuildings+1" />
				</Then>
			</If>
		</Action>
		<Action type="if">
			<If>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtHipHopStage" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:AddBuildingToLocationToList">
						<Objects>
							<ObjectByName name="HipHopStage" land="local" />
						</Objects>
					</Action>
					<Action type="setVariable" intVariable="NumSessionsBuildings" intValue="NumSessionsBuildings+1" />
				</Then>
			</If>
		</Action>
		<Action type="if">
			<If>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtSimpsonHome" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:AddBuildingToLocationToList">
						<Objects>
							<ObjectByName name="SimpsonHome" land="local" />
						</Objects>
					</Action>
					<Action type="setVariable" intVariable="NumSessionsBuildings" intValue="NumSessionsBuildings+1" />
				</Then>
			</If>
		</Action>
		<Action type="if">
			<If>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtMoesTavern" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:AddBuildingToLocationToList">
						<Objects>
							<ObjectByName name="MoesTavern" land="local" />
						</Objects>
					</Action>
					<Action type="setVariable" intVariable="NumSessionsBuildings" intValue="NumSessionsBuildings+1" />
				</Then>
			</If>
		</Action>
		<Action type="if">
			<If>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtKwikEMart" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:AddBuildingToLocationToList">
						<Objects>
							<ObjectByName name="Kwik-E-Mart" land="local" />
						</Objects>
					</Action>
					<Action type="setVariable" intVariable="NumSessionsBuildings" intValue="NumSessionsBuildings+1" />
				</Then>
			</If>
		</Action>
		<Action type="if">
			<If>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtKrustyBurger" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:AddBuildingToLocationToList">
						<Objects>
							<ObjectByName name="KrustyBurger" land="local" />
						</Objects>
					</Action>
					<Action type="setVariable" intVariable="NumSessionsBuildings" intValue="NumSessionsBuildings+1" />
				</Then>
			</If>
		</Action>
		<Action type="if">
			<If>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtSpringfieldElementary" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:AddBuildingToLocationToList">
						<Objects>
							<ObjectByName name="SpringfieldElementary" land="local" />
						</Objects>
					</Action>
					<Action type="setVariable" intVariable="NumSessionsBuildings" intValue="NumSessionsBuildings+1" />
				</Then>
			</If>
		</Action>
		<Action type="setVariable" intVariable="TEMP_SessionsBuildingCounter" intValue="0" addTempIfNotExisting="true" />
		<Action type="iterateObjectVariables" script="Music_Scripts:SetCounter">
			<Objects>
				<ObjectByName name="Obj_SessionsLocations" />
			</Objects>
			<ScriptObjects>
				<ObjectByUID land="local">
					<CopyObject index="0" />
				</ObjectByUID>
			</ScriptObjects>
		</Action>
	</ReAddBuildingsToLocationList>
	<AddBuildingToLocationToList parallel="true" cache="true">
		<Action type="pushBackObjectVariable" formula="Object::UID">
			<Objects>
				<ObjectByName name="Obj_SessionsLocations" land="local" />
				<CopyObject index="0" />
			</Objects>
		</Action>
	</AddBuildingToLocationToList>
	<Tab_Performers>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<False>
				<Action type="gotoland" land="Springfield" showPopup="true" />
			</False>
			<True>
				<Action type="if">
					<If expression="Music_PerformerGuideSeen">
						<Then>
							<Action type="updateVariable" variable="Music_EventHubTabValue" value="4" />
							<Action type="program">
								<Program><![CDATA[ #program;
                                        User::setVariable('Music_PerformerDonuts', User::getCurrencyAmount('donuts'), true);
                                    ]]></Program>
							</Action>
							<Action type="gotoState" state="GameState_TeamManagement" forceState="false">
								<Extras>
									<Attribute name="generalConfig" value="Music_PerformersConfig:GeneralConfig" />
									<Attribute name="potentialRosterConfig" value="Music_PerformersConfig:PotentialRosterConfig" />
									<Attribute name="menuConfig" value="Music_PerformersConfig:MenuConfig" />
								</Extras>
							</Action>
						</Then>
					</If>
					<Else>
						<Then>
							<Action type="actionSequence" script="Music_Scripts:GuidePanel_Performer_NoSound" />
						</Then>
					</Else>
				</Action>
			</True>
		</Action>
	</Tab_Performers>
	<Tab_PrizeTrack>
		<Action type="if">
			<If expression="Music_EventGuideSeen">
				<Then>
					<Action type="updateVariable" variable="Music_EventHubTabValue" value="0" />
					<Action type="gotoState" state="GameState_HubPrizeTrack" forceState="true">
						<Extras>
							<Attribute name="helpButtonScript" value="Music_Scripts:GuidePanel_Event" />
							<Attribute name="specialEvent" value="Music_Event" />
							<Attribute name="exitButtonScript" value="MiscScripts:GoToInGame" />
						</Extras>
					</Action>
					<Action type="markBadgeViewed" badgeName="Music_PrizeTrackBadge" />
				</Then>
			</If>
			<Else>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GuidePanel_Event" />
				</Then>
			</Else>
		</Action>
	</Tab_PrizeTrack>
	<Tab_WeirdAl>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<False>
				<Action type="gotoland" land="Springfield" showPopup="true" />
			</False>
			<True>
				<Action type="if">
					<If>
						<Requirement type="gamestate" state="GameState_QuestProgress" not="true" />
						<Then>
							<Action type="if">
								<If expression="Music_WeirdAlGuideSeen">
									<Then>
										<Action type="updateVariable" variable="Music_EventHubTabValue" value="3" />
										<Action type="if">
											<If>
												<Requirements>
													<Requirement type="conditional" logic="OR">
														<Requirement type="reqList" location="Music_Requirements:WeirdAl_Act2_Active" />
														<Requirement type="conditional" logic="AND">
															<Requirement type="quest" quest="WeirdAlTruism_8" />
															<Requirement type="quest started" quest="WeirdAlTruism_9" not="true" />
														</Requirement>
													</Requirement>
												</Requirements>
												<Then>
													<Action type="gotoState" state="GameState_QuestProgress" forceState="true">
														<Extras>
															<Attribute name="questParentDelegate" value="WeirdAlTruism_Master_2" />
															<Attribute name="specialEvent" value="Music_Event" />
															<Attribute name="showEventHub" value="true" />
														</Extras>
													</Action>
												</Then>
											</If>
											<ElseIf>
												<Requirements>
													<Requirement type="conditional" logic="OR">
														<Requirement type="reqList" location="Music_Requirements:WeirdAl_Act3_Active" />
														<Requirement type="quest" quest="WeirdAlTruism_11" />
													</Requirement>
												</Requirements>
												<Then>
													<Action type="gotoState" state="GameState_QuestProgress" forceState="true">
														<Extras>
															<Attribute name="questParentDelegate" value="WeirdAlTruism_Master_3" />
															<Attribute name="specialEvent" value="Music_Event" />
															<Attribute name="showEventHub" value="true" />
														</Extras>
													</Action>
												</Then>
											</ElseIf>
											<Else>
												<Then>
													<Action type="gotoState" state="GameState_QuestProgress" forceState="true">
														<Extras>
															<Attribute name="questParentDelegate" value="WeirdAlTruism_Master_1" />
															<Attribute name="specialEvent" value="Music_Event" />
															<Attribute name="showEventHub" value="true" />
														</Extras>
													</Action>
												</Then>
											</Else>
										</Action>
									</Then>
								</If>
								<Else>
									<Then>
										<Action type="actionSequence" script="Music_Scripts:GuidePanel_WeirdAl" />
									</Then>
								</Else>
							</Action>
						</Then>
					</If>
				</Action>
			</True>
		</Action>
	</Tab_WeirdAl>
	<Tab_WeirdAl_Act2 parallel="true" runQueueState="RunInAnyState">
		<Action type="checkRequirements">
			<Requirements>
				<Requirement type="conditional" logic="OR">
					<Requirement type="reqList" location="Music_Requirements:ActTwo" />
					<Requirement type="reqList" location="Music_Requirements:ActThree" />
				</Requirement>
				<Requirement type="quest started" quest="WeirdAlTruism_6" />
			</Requirements>
			<True>
				<Action type="changeQuestForProgressState" name="WeirdAlTruism_Master_2" />
			</True>
			<False>
				<Action type="notification" title="UI_WeirdAl_Prizes" button="UI_OK" text="UI_Superheroes2_PrizeTrack_Future_text" tooltip="UI_Superheroes2_PrizeTrack_Future_toolTip" icon="ICO_Music_WeirdAlAct2Teaser" darken="true" />
			</False>
		</Action>
	</Tab_WeirdAl_Act2>
	<Tab_WeirdAl_Act3 parallel="true" runQueueState="RunInAnyState">
		<Action type="checkRequirements">
			<Requirements>
				<Requirement type="reqList" location="Music_Requirements:ActThree" />
				<Requirement type="quest started" quest="WeirdAlTruism_9" />
			</Requirements>
			<True>
				<Action type="changeQuestForProgressState" name="WeirdAlTruism_Master_3" />
			</True>
			<False>
				<Action type="notification" title="UI_WeirdAl_Prizes" button="UI_OK" text="UI_Superheroes2_PrizeTrack_Future_text" tooltip="UI_Superheroes2_PrizeTrack_Future_toolTip" icon="ICO_Music_WeirdAlAct3Teaser" darken="true" />
			</False>
		</Action>
	</Tab_WeirdAl_Act3>
	<Tab_WeirdAl_Act1 parallel="true" runQueueState="RunInAnyState">
		<Action type="changeQuestForProgressState" name="WeirdAlTruism_Master_1" />
	</Tab_WeirdAl_Act1>
	<FestivalFan_Tapped parallel="true">
		<Action type="checkExpression" expression="Object::SkinID">
			<ExpressionCase value="0">
				<Action type="sound" sound="sfx_Music_Millenial_Fan_01_Camera.caf" />
			</ExpressionCase>
			<ExpressionCase value="178003">
				<Action type="sound" sound="sfx_Music_Hippie_Fan_02_Ecig_Puff.caf" />
			</ExpressionCase>
			<ExpressionCase value="178004">
				<Action type="sound" sound="sfx_Music_Groupie_Fan03_Tap.caf" />
			</ExpressionCase>
		</Action>
	</FestivalFan_Tapped>
	<PraiselandWallCreated parallel="true">
		<Action type="hudTip" text="UI_PraislandWall_Created" time="10s" />
	</PraiselandWallCreated>
	<PraiselandGate_Tapped parallel="true">
		<Action type="checkRequirements">
			<Requirements>
				<Requirement type="players land" />
			</Requirements>
			<True>
				<Action type="gotoState" state="GameState_BuildingSelected">
					<Extras>
						<Attribute name="BuildingName" value="PraiselandGate" />
						<Attribute name="GoToFarmMode" value="true" />
					</Extras>
				</Action>
			</True>
		</Action>
	</PraiselandGate_Tapped>
	<GuidePanel_Event>
		<Action type="updateVariable" variable="Music_EventGuideSeen" value="1" />
		<Action type="gotoState" state="State_HubGuidePanel" extras="Music_GuidePanelsConfig:EventGuide_Config" />
	</GuidePanel_Event>
	<GuidePanel_Crafting>
		<Action type="updateVariable" variable="Music_EventHubTabValue" value="2" />
		<Action type="updateVariable" variable="Music_CraftingGuideSeen" value="1" />
		<Action type="gotoState" state="State_HubGuidePanel" extras="Music_GuidePanelsConfig:CraftingGuide_Config" />
	</GuidePanel_Crafting>
	<GuidePanel_Crafting_Center>
		<Action type="updateVariable" variable="Music_CraftingGuideSeen" value="1" />
		<Action type="gotoState" state="State_HubGuidePanel" extras="Music_GuidePanelsConfig:CraftingGuide_Config">
			<Extras>
				<Attribute name="ExitButtonScript" value="MiscScripts:ReturnToGameState" />
				<Attribute name="Center" value="true" />
			</Extras>
		</Action>
	</GuidePanel_Crafting_Center>
	<GuidePanel_Performer>
		<Action type="sound" sound="UIButton" />
		<Action type="updateVariable" variable="Music_EventHubTabValue" value="4" />
		<Action type="updateVariable" variable="Music_PerformerGuideSeen" value="1" />
		<Action type="gotoState" state="State_HubGuidePanel" extras="Music_GuidePanelsConfig:PerformerGuide_Config" />
	</GuidePanel_Performer>
	<GuidePanel_Performer_NoSound>
		<Action type="updateVariable" variable="Music_EventHubTabValue" value="4" />
		<Action type="updateVariable" variable="Music_PerformerGuideSeen" value="1" />
		<Action type="gotoState" state="State_HubGuidePanel" extras="Music_GuidePanelsConfig:PerformerGuide_Config" />
	</GuidePanel_Performer_NoSound>
	<GuidePanel_Performer_Center>
		<Action type="updateVariable" variable="Music_PerformerGuideSeen" value="1" />
		<Action type="gotoState" state="State_HubGuidePanel" extras="Music_GuidePanelsConfig:PerformerGuide_Config">
			<Extras>
				<Attribute name="ExitButtonScript" value="MiscScripts:ReturnToGameState" />
				<Attribute name="Center" value="true" />
			</Extras>
		</Action>
	</GuidePanel_Performer_Center>
	<GuidePanel_WeirdAl>
		<Action type="updateVariable" variable="Music_EventHubTabValue" value="3" />
		<Action type="if">
			<If expression="Music_WeirdAlGuideSeen">
				<Then>
					<Action type="gotoState" state="State_HubGuidePanel" extras="Music_GuidePanelsConfig:WeirdAlGuide_NoButton_Config" />
				</Then>
			</If>
			<Else>
				<Then>
					<Action type="updateVariable" variable="Music_WeirdAlGuideSeen" value="1" />
					<Action type="gotoState" state="State_HubGuidePanel" extras="Music_GuidePanelsConfig:WeirdAlGuide_Config">
						<Extras>
							<Attribute name="ExitButtonScript" value="MiscScripts:ReturnToGameState" />
							<Attribute name="Center" value="true" />
						</Extras>
					</Action>
				</Then>
			</Else>
		</Action>
	</GuidePanel_WeirdAl>
	<GoTo_PopstarPlane parallel="true">
		<Action type="if">
			<If>
				<Requirement type="land" land="Springfield" not="true" />
				<Then>
					<Action type="gotoland" land="Springfield" showPopup="true" />
				</Then>
			</If>
			<ElseIf>
				<Requirement type="building" building="PopstarPlane" not="true" />
				<Then>
					<Action type="focusOnMenuItem" itemName="PopstarPlane" inventory="true" />
				</Then>
			</ElseIf>
			<Else>
				<Then>
					<Action type="pantoobject" time="0" building="PopstarPlane" fakeTouch="false" />
				</Then>
			</Else>
		</Action>
	</GoTo_PopstarPlane>
	<PopstarPlane_Tapped parallel="true" ignoreHUD="true">
		<Action type="anim-play" animation="ActiveNoLoop" />
	</PopstarPlane_Tapped>
	<PigBalloon_Tapped parallel="true" ignoreHUD="true">
		<Action type="anim-play" animation="ActiveNoLoop" />
	</PigBalloon_Tapped>
	<GoTo_StageTurret parallel="true">
		<Action type="if">
			<If>
				<Requirement type="land" land="Springfield" not="true" />
				<Then>
					<Action type="gotoland" land="Springfield" showPopup="true" />
				</Then>
			</If>
			<ElseIf>
				<Requirement type="building" building="StageTurret" not="true" />
				<Then>
					<Action type="focusOnMenuItem" itemName="StageTurret" inventory="true" />
				</Then>
			</ElseIf>
			<Else>
				<Then>
					<Action type="pantoobject" time="0" building="StageTurret" fakeTouch="false" />
				</Then>
			</Else>
		</Action>
	</GoTo_StageTurret>
	<StageTurret_Tapped parallel="true" ignoreHUD="true">
		<Action type="anim-play" animation="ActiveNoLoop" />
	</StageTurret_Tapped>
	<Music_GoToRockNeonSign parallel="true">
		<Action type="if">
			<If>
				<Requirement type="land" land="Springfield" not="true" />
				<Then>
					<Action type="gotoland" land="Springfield" showPopup="true" />
				</Then>
			</If>
			<ElseIf>
				<Requirement type="building" building="RockNeonSign" not="true" />
				<Then>
					<Action type="focusOnMenuItem" itemName="RockNeonSign" inventory="true" />
				</Then>
			</ElseIf>
			<Else>
				<Then>
					<Action type="pantoobject" time="0" building="RockNeonSign" fakeTouch="false" />
				</Then>
			</Else>
		</Action>
	</Music_GoToRockNeonSign>
	<RockNeonSign_Tapped parallel="true" ignoreHUD="true">
		<Action type="setObjectVariable" variable="State" value="mod(Object::State+1, 2)" asExpression="true" allowOrphan="false" />
	</RockNeonSign_Tapped>
	<Music_GoToSpotlightDanceBot>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<False>
				<Action type="gotoland" land="Springfield" showPopup="true" />
			</False>
			<True>
				<Action type="pantoobject" time="0" character="SpotlightDanceBot" fakeTouch="false" />
			</True>
		</Action>
	</Music_GoToSpotlightDanceBot>
	<SpotlightDanceBot_Tapped parallel="true">
		<Action type="anim-play" animation="Tap" nowait="true" />
	</SpotlightDanceBot_Tapped>
	<Skylight_Tapped parallel="true" ignoreHUD="true">
		<Action type="setObjectVariable" variable="State" value="mod(Object::State+1, 2)" asExpression="true" allowOrphan="false" />
	</Skylight_Tapped>
	<Music_GoToBlastingBass>
		<Action type="if">
			<If>
				<Requirement type="land" land="Springfield" not="true" />
				<Then>
					<Action type="gotoland" land="Springfield" showPopup="true" />
				</Then>
			</If>
			<ElseIf>
				<Requirement type="building" building="BlastingBass" not="true" />
				<Then>
					<Action type="focusOnMenuItem" itemName="BlastingBass" inventory="true" />
				</Then>
			</ElseIf>
			<Else>
				<Then>
					<Action type="pantoobject" time="0" building="BlastingBass" fakeTouch="false" />
				</Then>
			</Else>
		</Action>
	</Music_GoToBlastingBass>
	<Music_GoToRudeCrowd>
		<Action type="if">
			<If>
				<Requirement type="land" land="Springfield" not="true" />
				<Then>
					<Action type="gotoland" land="Springfield" showPopup="true" />
				</Then>
			</If>
			<ElseIf>
				<Requirement type="building" building="RudeCrowd" not="true" />
				<Then>
					<Action type="focusOnMenuItem" itemName="RudeCrowd" inventory="true" />
				</Then>
			</ElseIf>
			<Else>
				<Then>
					<Action type="pantoobject" time="0" building="RudeCrowd" fakeTouch="false" />
				</Then>
			</Else>
		</Action>
	</Music_GoToRudeCrowd>
	<Music_GoToCheeringCrowd>
		<Action type="if">
			<If>
				<Requirement type="land" land="Springfield" not="true" />
				<Then>
					<Action type="gotoland" land="Springfield" showPopup="true" />
				</Then>
			</If>
			<ElseIf>
				<Requirement type="building" building="CheeringCrowd" not="true" />
				<Then>
					<Action type="focusOnMenuItem" itemName="CheeringCrowd" inventory="true" />
				</Then>
			</ElseIf>
			<Else>
				<Then>
					<Action type="pantoobject" time="0" building="CheeringCrowd" fakeTouch="false" />
				</Then>
			</Else>
		</Action>
	</Music_GoToCheeringCrowd>
	<ForbiddenTree_Tapped parallel="true" ignoreHUD="true">
		<Action type="anim-play" animation="ActiveNoLoop" />
	</ForbiddenTree_Tapped>
	<SungazerTourBus_Tapped parallel="true" ignoreHUD="true">
		<Action type="anim-play" animation="ActiveNoLoop" />
	</SungazerTourBus_Tapped>
	<StageTurret_Tapped parallel="true" ignoreHUD="true">
		<Action type="anim-play" animation="ActiveNoLoop" />
	</StageTurret_Tapped>
	<RockNRollCart_Tapped parallel="true" ignoreHUD="true">
		<Action type="anim-play" animation="ActiveNoLoop" />
	</RockNRollCart_Tapped>
	<BlastingBass_Tapped parallel="true" ignoreHUD="true">
		<Action type="anim-play" animation="ActiveNoLoop" />
	</BlastingBass_Tapped>
	<SmokeMachine_Tapped parallel="true" ignoreHUD="true">
		<Action type="anim-play" animation="ActiveNoLoop" />
	</SmokeMachine_Tapped>
	<SpawnLocalSocialTappable>
		<Action type="checkRequirements">
			<Requirement type="reqList" location="Music_Requirements:SocialActions_Unlocked" />
			<True>
				<Action type="addlocaltimedcharacter" character="Lawyer" event="178000" />
				<Action type="sound" sound="Friends_TreasureHunter_Drop" />
				<Action type="createobject" name="Lawyer" count="1" save="false" panCamera="false" showFadeIn="false" teleportCamera="true" />
			</True>
		</Action>
	</SpawnLocalSocialTappable>
	<SpawnFriendSocialTappable>
		<Action type="checkRequirements">
			<Requirement type="reqList" location="Music_Requirements:SocialActions_Unlocked" />
			<True>
				<Action type="addfriendtimedcharacter" character="Lawyer" event="178000" />
			</True>
		</Action>
	</SpawnFriendSocialTappable>
	<OffLineReward>
		<Action type="gotoState" state="GameState_TappableReward">
			<Extras>
				<Attribute name="MenuConfig" value="Music_TappableRewardMenuConfig:MenuConfig" />
			</Extras>
		</Action>
	</OffLineReward>
	<LawyerTapped parallel="true" cache="true">
		<Action type="sound" sound="Lawyer_Tap" />
		<Action type="stop" character="Lawyer" />
		<Action type="playanimation" character="Lawyer" animation="Tap" />
		<Action type="checkRequirements">
			<Requirements>
				<Requirement type="reqList" location="Music_Requirements:SocialActions_Unlocked" />
			</Requirements>
			<True>
				<Action type="reward" suppress_sound="true" Music_ActivePrizeTrackCurrency="__Music_GameConfig:Tappables:Social_PTCurrency_Amount__" Music_TicketStubs="__Music_GameConfig:Tappables:Social_CraftingCurrency_Amount__" />
				<Action type="removetimedcharacter" script="FriendHasTappedLawyer" package="Music_Scripts" character="Lawyer" event="178000" />
			</True>
		</Action>
	</LawyerTapped>
	<FriendHasTappedLawyer parallel="true" cache="true">
		<Action type="removefriendstimedcharacter" character="Lawyer" event="178000" />
	</FriendHasTappedLawyer>
	<GoToNickDelacourt>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<True>
				<Action type="checkRequirements">
					<Requirements>
						<Requirement type="item" item="NickDelacourt" checkInventoryOnly="true" />
					</Requirements>
					<True>
						<Action type="focusOnMenuItem" itemName="NickDelacourt" inventory="true" />
					</True>
					<False>
						<Action type="runScript" script="Music_Scripts:Tab_PrizeTrack" />
					</False>
				</Action>
			</True>
			<False>
				<Action type="gotoState" state="GameState_InGame" />
				<Action type="pantoobject" building="KrustylandShuttleToSpringfield" fakeTouch="true" />
			</False>
		</Action>
	</GoToNickDelacourt>
	<GoToPopStage_PT>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<True>
				<Action type="checkRequirements">
					<Requirements>
						<Requirement type="item" item="PopStage" checkInventoryOnly="true" />
					</Requirements>
					<True>
						<Action type="focusOnMenuItem" itemName="PopStage" inventory="true" />
					</True>
					<False>
						<Action type="checkRequirements">
							<Requirement type="building owned" building="PopStage" />
							<True>
								<Action type="pantoobject" building="PopStage" />
							</True>
							<False>
								<Action type="runScript" script="Music_Scripts:Tab_PrizeTrack" />
							</False>
						</Action>
					</False>
				</Action>
			</True>
			<False>
				<Action type="gotoState" state="GameState_InGame" />
				<Action type="pantoobject" building="KrustylandShuttleToSpringfield" fakeTouch="true" />
			</False>
		</Action>
	</GoToPopStage_PT>
	<GoToPopstarPlane_PT>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<True>
				<Action type="checkRequirements">
					<Requirements>
						<Requirement type="item" item="PopstarPlane" checkInventoryOnly="true" />
					</Requirements>
					<True>
						<Action type="focusOnMenuItem" itemName="PopstarPlane" inventory="true" />
					</True>
					<False>
						<Action type="runScript" script="Music_Scripts:Tab_PrizeTrack" />
					</False>
				</Action>
			</True>
			<False>
				<Action type="gotoState" state="GameState_InGame" />
				<Action type="pantoobject" building="KrustylandShuttleToSpringfield" fakeTouch="true" />
			</False>
		</Action>
	</GoToPopstarPlane_PT>
	<GoToBuzzColaTent_Crafting>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<True>
				<Action type="checkRequirements">
					<Requirements>
						<Requirement type="item" item="BuzzColaTent" checkInventoryOnly="true" />
					</Requirements>
					<True>
						<Action type="focusOnMenuItem" itemName="BuzzColaTent" inventory="true" />
					</True>
					<False>
						<Action type="actionSequence" script="Music_Scripts:Tab_Crafting_ScrollTo">
							<FormatToken key="ItemToScrollTo" value="BLD_BuzzColaTent_name" />
						</Action>
					</False>
				</Action>
			</True>
			<False>
				<Action type="gotoState" state="GameState_InGame" />
				<Action type="pantoobject" building="KrustylandShuttleToSpringfield" fakeTouch="true" />
			</False>
		</Action>
	</GoToBuzzColaTent_Crafting>
	<GoToHipHopStage_PT>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<True>
				<Action type="checkRequirements">
					<Requirements>
						<Requirement type="item" item="HipHopStage" checkInventoryOnly="true" />
					</Requirements>
					<True>
						<Action type="focusOnMenuItem" itemName="HipHopStage" inventory="true" />
					</True>
					<False>
						<Action type="checkRequirements">
							<Requirement type="building owned" building="HipHopStage" />
							<True>
								<Action type="pantoobject" building="HipHopStage" />
							</True>
							<False>
								<Action type="runScript" script="Music_Scripts:Tab_PrizeTrack" />
							</False>
						</Action>
					</False>
				</Action>
			</True>
			<False>
				<Action type="gotoState" state="GameState_InGame" />
				<Action type="pantoobject" building="KrustylandShuttleToSpringfield" fakeTouch="true" />
			</False>
		</Action>
	</GoToHipHopStage_PT>
	<GoToRappinBart_PT>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<True>
				<Action type="checkRequirements">
					<Requirements>
						<Requirement type="item" item="RappinBart" checkInventoryOnly="true" />
					</Requirements>
					<True>
						<Action type="focusOnMenuItem" itemName="RappinBart" inventory="true" />
					</True>
					<False>
						<Action type="runScript" script="Music_Scripts:Tab_PrizeTrack" />
					</False>
				</Action>
			</True>
			<False>
				<Action type="gotoState" state="GameState_InGame" />
				<Action type="pantoobject" building="KrustylandShuttleToSpringfield" fakeTouch="true" />
			</False>
		</Action>
	</GoToRappinBart_PT>
	<GoToPraiselandGate>
		<Action type="checkRequirements">
			<Requirements>
				<Requirement type="land" land="Springfield" />
			</Requirements>
			<True>
				<Action type="checkRequirements">
					<Requirement type="building" building="PraiselandGate" />
					<True>
						<Action type="pantoobject" building="PraiselandGate" fakeTouch="true" />
					</True>
					<False>
						<Action type="focusOnMenuItem" itemName="PraiselandGate" inventory="true" />
					</False>
				</Action>
			</True>
			<False>
				<Action type="pantoobject" building="KrustylandShuttleToSpringfield" fakeTouch="true" />
			</False>
		</Action>
	</GoToPraiselandGate>
	<GoToHomerTutorialSession>
		<Action type="if">
			<If>
				<Requirement type="land" land="Krustyland" />
				<Then>
					<Action type="pantoobject" building="KrustylandShuttleToSpringfield" fakeTouch="true" />
				</Then>
			</If>
			<ElseIf>
				<Requirement type="JobState" job="HomerTutorialSession" character="Homer" state="Began" />
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="RockStage" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<Else>
				<Then>
					<Action type="if">
						<If expression="#program;                             var character = Land::getFirstInstanceOfObject(Character::find('Homer'));                             if(!isNULL(character))                             {                             if(isNULL(Character::getCurrentJobInstance(character)))                             {                             return true;                             }                             }                             return false;">
							<Then>
								<Action type="setVariable" intVariable="AutoSlotCharacterID" intValue="3" />
								<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
									<Objects>
										<ObjectByName name="RockStage" />
									</Objects>
								</Action>
							</Then>
						</If>
						<Else>
							<Then>
								<Action type="if">
									<If expression="#program;                                         var character = Character::find('Homer');                                         var proxy = Land::getFirstProxyInstanceOfObject(character);                                         if(!isNULL(proxy))                                         {                                             return true;                                         }                                         return false;">
										<Then>
											<Action type="runScript" script="DailyTasks_HelperScripts:GoToShuttleToKL" />
											<Action type="hudTip" text="UI_Music_Homer_Krustyland" time="10s" requiresActiveHUD="false" />
										</Then>
									</If>
									<Else>
										<Then>
											<Action type="hudTip" text="UI_Music_Homer_Busy" time="10s" requiresActiveHUD="false" />
										</Then>
									</Else>
								</Action>
							</Then>
						</Else>
					</Action>
				</Then>
			</Else>
		</Action>
	</GoToHomerTutorialSession>
	<GoToSessionForPeterDAbbruzio>
		<Action type="if">
			<If>
				<Requirement type="land" land="Krustyland" />
				<Then>
					<Action type="pantoobject" building="KrustylandShuttleToSpringfield" fakeTouch="true" />
				</Then>
			</If>
			<ElseIf>
				<Requirement type="conditional" logic="OR">
					<Requirement type="JobState" job="RockStageSession" character="PeterDAbbruzio" state="Began" />
					<Requirement type="JobState" job="SimpsonHomeRockSession" character="PeterDAbbruzio" state="Began" />
					<Requirement type="JobState" job="MoesTavernRockSession" character="PeterDAbbruzio" state="Began" />
					<Requirement type="JobState" job="KwikEMartRockSession" character="PeterDAbbruzio" state="Began" />
				</Requirement>
				<Then>
					<Action type="runScript" script="GoToRockSessionForCharacter" package="Music_Scripts">
						<FormatToken key="CharacterName" value="PeterDAbbruzio" />
					</Action>
				</Then>
			</ElseIf>
			<Else>
				<Then>
					<Action type="if">
						<If expression="#program;                             var character = Land::getFirstInstanceOfObject(Character::find('PeterDAbbruzio'));                             if(!isNULL(character))                             {                                 if(isNULL(Character::getCurrentJobInstance(character)))                                 {                                     return true;                                 }                             }                             return false;">
							<Then>
								<Action type="if">
									<If expression="#program;                                                                                  if(System::evaluate('Building::RockStage::Object::JobCount')==0 ||                                         System::evaluate('Building::SimpsonHome::Object::JobCount')==0 ||                                         System::evaluate('Building::MoesTavern::Object::JobCount')==0 ||                                         System::evaluate('Building::Kwik-E-Mart::Object::JobCount')==0)                                         {                                             return true;                                         }                                                                                  return false;">
										<Then>
											<Action type="setVariable" intVariable="AutoSlotCharacterID" intValue="178002" />
											<Action type="runScript" script="GoToRockSessionForCharacter" package="Music_Scripts">
												<FormatToken key="CharacterName" value="PeterDAbbruzio" />
											</Action>
										</Then>
									</If>
									<Else>
										<Then>
											<Action type="hudTip" text="UI_Music_PeterDAbbruzio_NoSessions" time="10s" requiresActiveHUD="false" />
										</Then>
									</Else>
								</Action>
							</Then>
						</If>
						<ElseIf>
							<Requirement type="item" item="SungazerStudio" checkInventoryOnly="true" />
							<Then>
								<Action type="focusOnMenuItem" itemName="SungazerStudio" inventory="true" />
							</Then>
						</ElseIf>
						<Else>
							<Then>
								<Action type="hudTip" text="UI_Music_PeterDAbbruzio_Busy" time="10s" requiresActiveHUD="false" />
							</Then>
						</Else>
					</Action>
				</Then>
			</Else>
		</Action>
	</GoToSessionForPeterDAbbruzio>
	<GoToSessionForAlaskaNebraska>
		<Action type="if">
			<If>
				<Requirement type="land" land="Krustyland" />
				<Then>
					<Action type="pantoobject" building="KrustylandShuttleToSpringfield" fakeTouch="true" />
				</Then>
			</If>
			<ElseIf>
				<Requirement type="conditional" logic="OR">
					<Requirement type="JobState" job="PopStageSession" character="AlaskaNebraska" state="Began" />
					<Requirement type="JobState" job="SpringfieldElementaryPopSession" character="AlaskaNebraska" state="Began" />
					<Requirement type="JobState" job="MoesTavernPopSession" character="AlaskaNebraska" state="Began" />
					<Requirement type="JobState" job="KwikEMartPopSession" character="AlaskaNebraska" state="Began" />
				</Requirement>
				<Then>
					<Action type="runScript" script="GoToPopStageSessionForCharacter" package="Music_Scripts">
						<FormatToken key="CharacterName" value="AlaskaNebraska" />
					</Action>
				</Then>
			</ElseIf>
			<Else>
				<Then>
					<Action type="if">
						<If expression="#program;                             var character = Land::getFirstInstanceOfObject(Character::find('AlaskaNebraska'));                             if(!isNULL(character))                             {                                 if(isNULL(Character::getCurrentJobInstance(character)))                                 {                                     return true;                                 }                             }                             return false;">
							<Then>
								<Action type="if">
									<If expression="#program;                                                                                  if(System::evaluate('Building::PopStage::Object::JobCount')==0 ||                                         System::evaluate('Building::SpringfieldElementary::Object::JobCount')==0 ||                                         System::evaluate('Building::MoesTavern::Object::JobCount')==0 ||                                         System::evaluate('Building::Kwik-E-Mart::Object::JobCount')==0)                                         {                                             return true;                                         }                                                                                  return false;">
										<Then>
											<Action type="setVariable" intVariable="AutoSlotCharacterID" intValue="178005" />
											<Action type="runScript" script="GoToPopStageSessionForCharacter" package="Music_Scripts">
												<FormatToken key="CharacterName" value="AlaskaNebraska" />
											</Action>
										</Then>
									</If>
									<Else>
										<Then>
											<Action type="hudTip" text="UI_Music_AlaskaNebraska_NoSessions" time="10s" requiresActiveHUD="false" />
										</Then>
									</Else>
								</Action>
							</Then>
						</If>
						<ElseIf>
							<Requirement type="item" item="AlaskaNebraska" checkInventoryOnly="true" />
							<Then>
								<Action type="focusOnMenuItem" itemName="AlaskaNebraska" inventory="true" />
							</Then>
						</ElseIf>
						<Else>
							<Then>
								<Action type="hudTip" text="UI_Music_AlaskaNebraska_Busy" time="10s" requiresActiveHUD="false" />
							</Then>
						</Else>
					</Action>
				</Then>
			</Else>
		</Action>
	</GoToSessionForAlaskaNebraska>
	<GoToSessionForRappinBart>
		<Action type="if">
			<If>
				<Requirement type="land" land="Krustyland" />
				<Then>
					<Action type="pantoobject" building="KrustylandShuttleToSpringfield" fakeTouch="true" />
				</Then>
			</If>
			<ElseIf>
				<Requirement type="conditional" logic="OR">
					<Requirement type="JobState" job="HipHopStageSession" character="Bart" state="Began" />
					<Requirement type="JobState" job="KrustyBurgerHipHopSession" character="Bart" state="Began" />
					<Requirement type="JobState" job="MoesTavernHipHopSession" character="Bart" state="Began" />
					<Requirement type="JobState" job="KwikEMartHipHopSession" character="Bart" state="Began" />
				</Requirement>
				<Then>
					<Action type="runScript" script="GoToHipHopSessionForCharacter" package="Music_Scripts">
						<FormatToken key="CharacterName" value="Bart" />
					</Action>
				</Then>
			</ElseIf>
			<Else>
				<Then>
					<Action type="if">
						<If expression="#program;                             var character = Land::getFirstInstanceOfObject(Character::find('Bart'));                             if(!isNULL(character))                             {                                 if(isNULL(Character::getCurrentJobInstance(character)))                                 {                                     return true;                                 }                             }                             return false;">
							<Then>
								<Action type="if">
									<If expression="#program;                                                                                  if(System::evaluate('Building::HipHopStage::Object::JobCount')==0 ||                                         System::evaluate('Building::KrustyBurger::Object::JobCount')==0 ||                                         System::evaluate('Building::MoesTavern::Object::JobCount')==0 ||                                         System::evaluate('Building::Kwik-E-Mart::Object::JobCount')==0)                                         {                                         return true;                                         }                                                                                  return false;">
										<Then>
											<Action type="setVariable" intVariable="AutoSlotCharacterID" intValue="1" />
											<Action type="runScript" script="GoToHipHopSessionForCharacter" package="Music_Scripts">
												<FormatToken key="CharacterName" value="Bart" />
											</Action>
										</Then>
									</If>
									<Else>
										<Then>
											<Action type="hudTip" text="UI_Music_RappinBart_NoSessions" time="10s" requiresActiveHUD="false" />
										</Then>
									</Else>
								</Action>
							</Then>
						</If>
						<ElseIf>
							<Requirement type="item" item="BartsTreehouse" checkInventoryOnly="true" />
							<Then>
								<Action type="focusOnMenuItem" itemName="BartsTreehouse" inventory="true" />
							</Then>
						</ElseIf>
						<Else>
							<Then>
								<Action type="if">
									<If expression="#program;                                         var character = Character::find('Bart');                                         var proxy = Land::getFirstProxyInstanceOfObject(character);                                         if(!isNULL(proxy))                                         {                                             return true;                                         }                                         return false;">
										<Then>
											<Action type="runScript" script="DailyTasks_HelperScripts:GoToShuttleToKL" />
											<Action type="hudTip" text="UI_Music_RappinBart_Krustyland" time="10s" requiresActiveHUD="false" />
										</Then>
									</If>
									<Else>
										<Then>
											<Action type="hudTip" text="UI_Music_RappinBart_Busy" time="10s" requiresActiveHUD="false" />
										</Then>
									</Else>
								</Action>
							</Then>
						</Else>
					</Action>
				</Then>
			</Else>
		</Action>
	</GoToSessionForRappinBart>
	<GoToSessionForKrusty>
		<Action type="if">
			<If>
				<Requirement type="land" land="Krustyland" />
				<Then>
					<Action type="pantoobject" building="KrustylandShuttleToSpringfield" fakeTouch="true" />
				</Then>
			</If>
			<ElseIf>
				<Requirement type="conditional" logic="OR">
					<Requirement type="JobState" job="HipHopStageSession" character="Krusty" state="Began" />
					<Requirement type="JobState" job="KrustyBurgerHipHopSession" character="Krusty" state="Began" />
					<Requirement type="JobState" job="MoesTavernHipHopSession" character="Krusty" state="Began" />
					<Requirement type="JobState" job="KwikEMartHipHopSession" character="Krusty" state="Began" />
				</Requirement>
				<Then>
					<Action type="runScript" script="GoToHipHopStageSessionForCharacter" package="Music_Scripts">
						<FormatToken key="CharacterName" value="Krusty" />
					</Action>
				</Then>
			</ElseIf>
			<Else>
				<Then>
					<Action type="if">
						<If expression="#program;                             var character = Land::getFirstInstanceOfObject(Character::find('Krusty'));                             if(!isNULL(character))                             {                                 if(isNULL(Character::getCurrentJobInstance(character)))                                 {                                     return true;                                 }                             }                             return false;">
							<Then>
								<Action type="if">
									<If expression="#program;                                                                                  if(System::evaluate('Building::HipHopStage::Object::JobCount')==0 ||                                         System::evaluate('Building::KrustyBurger::Object::JobCount')==0 ||                                         System::evaluate('Building::MoesTavern::Object::JobCount')==0 ||                                         System::evaluate('Building::Kwik-E-Mart::Object::JobCount')==0)                                         {                                         return true;                                         }                                                                                  return false;">
										<Then>
											<Action type="setVariable" intVariable="AutoSlotCharacterID" intValue="10" />
											<Action type="runScript" script="GoToHipHopStageSessionForCharacter" package="Music_Scripts">
												<FormatToken key="CharacterName" value="Krusty" />
											</Action>
										</Then>
									</If>
									<Else>
										<Then>
											<Action type="hudTip" text="UI_Music_Krusty_NoSessions" time="10s" requiresActiveHUD="false" />
										</Then>
									</Else>
								</Action>
							</Then>
						</If>
						<ElseIf>
							<Requirement type="item" item="KrustyBurger" checkInventoryOnly="true" />
							<Then>
								<Action type="focusOnMenuItem" itemName="KrustyBurger" inventory="true" />
							</Then>
						</ElseIf>
						<Else>
							<Then>
								<Action type="if">
									<If expression="#program;                                         var character = Character::find('Krusty');                                         var proxy = Land::getFirstProxyInstanceOfObject(character);                                         if(!isNULL(proxy))                                         {                                             return true;                                         }                                         return false;">
										<Then>
											<Action type="runScript" script="DailyTasks_HelperScripts:GoToShuttleToKL" />
											<Action type="hudTip" text="UI_Music_Krusty_Krustyland" time="10s" requiresActiveHUD="false" />
										</Then>
									</If>
									<Else>
										<Then>
											<Action type="hudTip" text="UI_Music_Krusty_Busy" time="10s" requiresActiveHUD="false" />
										</Then>
									</Else>
								</Action>
							</Then>
						</Else>
					</Action>
				</Then>
			</Else>
		</Action>
	</GoToSessionForKrusty>
	<GoToSessionForNickDelacourt>
		<Action type="if">
			<If>
				<Requirement type="land" land="Krustyland" />
				<Then>
					<Action type="pantoobject" building="KrustylandShuttleToSpringfield" fakeTouch="true" />
				</Then>
			</If>
			<ElseIf>
				<Requirement type="conditional" logic="OR">
					<Requirement type="JobState" job="RockStageSession" character="NickDelacourt" state="Began" />
					<Requirement type="JobState" job="SimpsonHomeRockSession" character="NickDelacourt" state="Began" />
					<Requirement type="JobState" job="MoesTavernRockSession" character="NickDelacourt" state="Began" />
					<Requirement type="JobState" job="KwikEMartRockSession" character="NickDelacourt" state="Began" />
				</Requirement>
				<Then>
					<Action type="runScript" script="GoToRockStageSessionForCharacter" package="Music_Scripts">
						<FormatToken key="CharacterName" value="NickDelacourt" />
					</Action>
				</Then>
			</ElseIf>
			<Else>
				<Then>
					<Action type="if">
						<If expression="#program;                             var character = Land::getFirstInstanceOfObject(Character::find('NickDelacourt'));                             if(!isNULL(character))                             {                                 if(isNULL(Character::getCurrentJobInstance(character)))                                 {                                     return true;                                 }                             }                             return false;">
							<Then>
								<Action type="if">
									<If expression="#program;                                                                                  if(System::evaluate('Building::RockStage::Object::JobCount')==0 ||                                          System::evaluate('Building::SimpsonHome::Object::JobCount')==0 ||                                         System::evaluate('Building::MoesTavern::Object::JobCount')==0 ||                                          System::evaluate('Building::Kwik-E-Mart::Object::JobCount')==0)                                         {                                             return true;                                         }                                                                                  return false;">
										<Then>
											<Action type="setVariable" intVariable="AutoSlotCharacterID" intValue="178001" />
											<Action type="runScript" script="GoToRockStageSessionForCharacter" package="Music_Scripts">
												<FormatToken key="CharacterName" value="NickDelacourt" />
											</Action>
										</Then>
									</If>
									<Else>
										<Then>
											<Action type="hudTip" text="UI_Music_Nick_NoSessions" time="10s" requiresActiveHUD="false" />
										</Then>
									</Else>
								</Action>
							</Then>
						</If>
						<ElseIf>
							<Requirement type="item" item="NickDelacourt" checkInventoryOnly="true" />
							<Then>
								<Action type="focusOnMenuItem" itemName="NickDelacourt" inventory="true" />
							</Then>
						</ElseIf>
						<Else>
							<Then>
								<Action type="hudTip" text="UI_Music_Nick_Busy" time="10s" requiresActiveHUD="false" />
							</Then>
						</Else>
					</Action>
				</Then>
			</Else>
		</Action>
	</GoToSessionForNickDelacourt>
	<GoToSessionForOtto>
		<Action type="if">
			<If>
				<Requirement type="land" land="Krustyland" />
				<Then>
					<Action type="pantoobject" building="KrustylandShuttleToSpringfield" fakeTouch="true" />
				</Then>
			</If>
			<ElseIf>
				<Requirement type="conditional" logic="OR">
					<Requirement type="JobState" job="RockStageSession" character="Otto" state="Began" />
					<Requirement type="JobState" job="SimpsonHomeRockSession" character="Otto" state="Began" />
					<Requirement type="JobState" job="MoesTavernRockSession" character="Otto" state="Began" />
					<Requirement type="JobState" job="KwikEMartRockSession" character="Otto" state="Began" />
				</Requirement>
				<Then>
					<Action type="runScript" script="GoToRockStageSessionForCharacter" package="Music_Scripts">
						<FormatToken key="CharacterName" value="Otto" />
					</Action>
				</Then>
			</ElseIf>
			<Else>
				<Then>
					<Action type="if">
						<If expression="#program;                             var character = Land::getFirstInstanceOfObject(Character::find('Otto'));                             if(!isNULL(character))                             {                             if(isNULL(Character::getCurrentJobInstance(character)))                             {                                 return true;                             }                             }                             return false;">
							<Then>
								<Action type="if">
									<If expression="#program;                                                                                  if(System::evaluate('Building::RockStage::Object::JobCount')==0 ||                                         System::evaluate('Building::SimpsonHome::Object::JobCount')==0 ||                                         System::evaluate('Building::MoesTavern::Object::JobCount')==0 ||                                         System::evaluate('Building::Kwik-E-Mart::Object::JobCount')==0)                                         {                                         return true;                                         }                                                                                  return false;">
										<Then>
											<Action type="setVariable" intVariable="AutoSlotCharacterID" intValue="38" />
											<Action type="runScript" script="GoToRockStageSessionForCharacter" package="Music_Scripts">
												<FormatToken key="CharacterName" value="Otto" />
											</Action>
										</Then>
									</If>
									<Else>
										<Then>
											<Action type="hudTip" text="UI_Music_Otto_NoSessions" time="10s" requiresActiveHUD="false" />
										</Then>
									</Else>
								</Action>
							</Then>
						</If>
						<ElseIf>
							<Requirement type="item" item="Otto" checkInventoryOnly="true" />
							<Then>
								<Action type="focusOnMenuItem" itemName="Otto" inventory="true" />
							</Then>
						</ElseIf>
						<Else>
							<Then>
								<Action type="if">
									<If expression="#program;                                         var character = Character::find('Otto');                                         var proxy = Land::getFirstProxyInstanceOfObject(character);                                         if(!isNULL(proxy))                                         {                                             return true;                                         }                                         return false;">
										<Then>
											<Action type="runScript" script="DailyTasks_HelperScripts:GoToShuttleToKL" />
											<Action type="hudTip" text="UI_Music_Otto_Krustyland" time="10s" requiresActiveHUD="false" />
										</Then>
									</If>
									<Else>
										<Then>
											<Action type="hudTip" text="UI_Music_Otto_Busy" time="10s" requiresActiveHUD="false" />
										</Then>
									</Else>
								</Action>
							</Then>
						</Else>
					</Action>
				</Then>
			</Else>
		</Action>
	</GoToSessionForOtto>
	<GoToRockSessionForCharacter>
		<Action type="if" formatMe="deep">
			<If>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtRockStage" />
					<Requirement type="conditional" logic="OR">
						<Requirement type="JobState" job="RockStageSession" character="{CharacterName}" state="Began" />
						<Requirement type="conditional" logic="OR" not="true">
							<Requirement type="JobState" job="RockStageSession" building="RockStage" state="Began" />
							<Requirement type="JobState" job="SimpsonHomeRockSession" character="{CharacterName}" state="Began" />
							<Requirement type="JobState" job="MoesTavernRockSession" character="{CharacterName}" state="Began" />
							<Requirement type="JobState" job="KwikEMartRockSession" character="{CharacterName}" state="Began" />
						</Requirement>
					</Requirement>
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="RockStage" />
						</Objects>
					</Action>
				</Then>
			</If>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtSimpsonHome" />
					<Requirement type="conditional" logic="OR">
						<Requirement type="JobState" job="SimpsonHomeRockSession" character="{CharacterName}" state="Began" />
						<Requirement type="conditional" logic="OR" not="true">
							<Requirement type="JobState" job="SimpsonHomeRockSession" building="SimpsonHome" state="Began" />
							<Requirement type="JobState" job="MoesTavernRockSession" character="{CharacterName}" state="Began" />
							<Requirement type="JobState" job="KwikEMartRockSession" character="{CharacterName}" state="Began" />
							<Requirement type="JobState" job="RockStageSession" character="{CharacterName}" state="Began" />
						</Requirement>
					</Requirement>
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="SimpsonHome" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtMoesTavern" />
					<Requirement type="conditional" logic="OR">
						<Requirement type="JobState" job="MoesTavernRockSession" character="{CharacterName}" state="Began" />
						<Requirement type="conditional" logic="AND">
							<Requirement type="reqList" location="Music_Requirements:IsMoesTavernRock" />
							<Requirement type="conditional" logic="OR" not="true">
								<Requirement type="JobState" job="MoesTavernRockSession" building="MoesTavern" state="Began" />
								<Requirement type="JobState" job="SimpsonHomeRockSession" character="{CharacterName}" state="Began" />
								<Requirement type="JobState" job="KwikEMartRockSession" character="{CharacterName}" state="Began" />
								<Requirement type="JobState" job="RockStageSession" character="{CharacterName}" state="Began" />
							</Requirement>
						</Requirement>
					</Requirement>
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="MoesTavern" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtKwikEMart" />
					<Requirement type="conditional" logic="OR">
						<Requirement type="JobState" job="KwikEMartRockSession" character="{CharacterName}" state="Began" />
						<Requirement type="conditional" logic="AND">
							<Requirement type="reqList" location="Music_Requirements:IsKwikEMartRock" />
							<Requirement type="conditional" logic="OR" not="true">
								<Requirement type="JobState" job="KwikEMartRockSession" building="Kwik-E-Mart" state="Began" />
								<Requirement type="JobState" job="SimpsonHomeRockSession" character="{CharacterName}" state="Began" />
								<Requirement type="JobState" job="MoesTavernRockSession" character="{CharacterName}" state="Began" />
								<Requirement type="JobState" job="RockStageSession" character="{CharacterName}" state="Began" />
							</Requirement>
						</Requirement>
					</Requirement>
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="Kwik-E-Mart" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtRockStage" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="RockStage" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<Else>
				<Then>
					<Action type="runScript" script="Music_Scripts:Tab_Sessions" />
				</Then>
			</Else>
		</Action>
	</GoToRockSessionForCharacter>
	<GoToRockStageSessionForCharacter>
		<Action type="if" formatMe="deep">
			<If>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtRockStage" />
					<Requirement type="conditional" logic="OR">
						<Requirement type="JobState" job="RockStageSession" character="{CharacterName}" state="Began" />
						<Requirement type="conditional" logic="OR" not="true">
							<Requirement type="JobState" job="RockStageSession" building="RockStage" state="Began" />
							<Requirement type="JobState" job="SimpsonHomeRockSession" character="{CharacterName}" state="Began" />
							<Requirement type="JobState" job="MoesTavernRockSession" character="{CharacterName}" state="Began" />
							<Requirement type="JobState" job="KwikEMartRockSession" character="{CharacterName}" state="Began" />
						</Requirement>
					</Requirement>
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="RockStage" />
						</Objects>
					</Action>
				</Then>
			</If>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtSimpsonHome" />
					<Requirement type="JobState" job="SimpsonHomeRockSession" character="{CharacterName}" state="Began" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="SimpsonHome" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtMoesTavern" />
					<Requirement type="JobState" job="MoesTavernRockSession" character="{CharacterName}" state="Began" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="MoesTavern" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtKwikEMart" />
					<Requirement type="JobState" job="KwikEMartRockSession" character="{CharacterName}" state="Began" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="Kwik-E-Mart" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtRockStage" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="RockStage" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<Else>
				<Then>
					<Action type="runScript" script="Music_Scripts:Tab_Sessions" />
				</Then>
			</Else>
		</Action>
	</GoToRockStageSessionForCharacter>
	<GoToPopStageSessionForCharacter>
		<Action type="if" formatMe="deep">
			<If>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtPopStage" />
					<Requirement type="conditional" logic="OR">
						<Requirement type="JobState" job="PopStageSession" character="{CharacterName}" state="Began" />
						<Requirement type="conditional" logic="OR" not="true">
							<Requirement type="JobState" job="PopStageSession" building="PopStage" state="Began" />
							<Requirement type="JobState" job="MoesTavernPopSession" character="{CharacterName}" state="Began" />
							<Requirement type="JobState" job="KwikEMartPopSession" character="{CharacterName}" state="Began" />
							<Requirement type="JobState" job="SpringfieldElementaryPopSession" character="{CharacterName}" state="Began" />
						</Requirement>
					</Requirement>
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="PopStage" />
						</Objects>
					</Action>
				</Then>
			</If>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtMoesTavern" />
					<Requirement type="JobState" job="MoesTavernPopSession" character="{CharacterName}" state="Began" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="MoesTavern" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtKwikEMart" />
					<Requirement type="JobState" job="KwikEMartPopSession" character="{CharacterName}" state="Began" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="Kwik-E-Mart" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtSpringfieldElementary" />
					<Requirement type="JobState" job="SpringfieldElementaryPopSession" character="{CharacterName}" state="Began" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="SpringfieldElementary" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtPopStage" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="PopStage" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<Else>
				<Then>
					<Action type="runScript" script="Music_Scripts:Tab_Sessions" />
				</Then>
			</Else>
		</Action>
	</GoToPopStageSessionForCharacter>
	<GoToHipHopSessionForCharacter>
		<Action type="if" formatMe="deep">
			<If>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtHipHopStage" />
					<Requirement type="conditional" logic="OR">
						<Requirement type="JobState" job="HipHopStageSession" character="{CharacterName}" state="Began" />
						<Requirement type="conditional" logic="OR" not="true">
							<Requirement type="JobState" job="HipHopStageSession" building="HipHopStage" state="Began" />
							<Requirement type="JobState" job="MoesTavernHipHopSession" character="{CharacterName}" state="Began" />
							<Requirement type="JobState" job="KwikEMartHipHopSession" character="{CharacterName}" state="Began" />
							<Requirement type="JobState" job="KrustyBurgerHipHopSession" character="{CharacterName}" state="Began" />
						</Requirement>
					</Requirement>
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="HipHopStage" />
						</Objects>
					</Action>
				</Then>
			</If>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtMoesTavern" />
					<Requirement type="conditional" logic="OR">
						<Requirement type="JobState" job="MoesTavernHipHopSession" character="{CharacterName}" state="Began" />
						<Requirement type="conditional" logic="AND">
							<Requirement type="reqList" location="Music_Requirements:IsMoesTavernHipHop" />
							<Requirement type="conditional" logic="OR" not="true">
								<Requirement type="JobState" job="MoesTavernHipHopSession" building="MoesTavern" state="Began" />
								<Requirement type="JobState" job="HipHopStageSession" character="{CharacterName}" state="Began" />
								<Requirement type="JobState" job="KwikEMartHipHopSession" character="{CharacterName}" state="Began" />
								<Requirement type="JobState" job="KrustyBurgerHipHopSession" character="{CharacterName}" state="Began" />
							</Requirement>
						</Requirement>
					</Requirement>
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="MoesTavern" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtKwikEMart" />
					<Requirement type="conditional" logic="OR">
						<Requirement type="JobState" job="KwikEMartHipHopSession" character="{CharacterName}" state="Began" />
						<Requirement type="conditional" logic="AND">
							<Requirement type="reqList" location="Music_Requirements:IsKwikEMartHipHop" />
							<Requirement type="conditional" logic="OR" not="true">
								<Requirement type="JobState" job="KwikEMartHipHopSession" building="Kwik-E-Mart" state="Began" />
								<Requirement type="JobState" job="MoesTavernHipHopSession" character="{CharacterName}" state="Began" />
								<Requirement type="JobState" job="KrustyBurgerHipHopSession" character="{CharacterName}" state="Began" />
								<Requirement type="JobState" job="HipHopStageSession" character="{CharacterName}" state="Began" />
							</Requirement>
						</Requirement>
					</Requirement>
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="Kwik-E-Mart" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtKrustyBurger" />
					<Requirement type="conditional" logic="OR">
						<Requirement type="JobState" job="KrustyBurgerHipHopSession" character="{CharacterName}" state="Began" />
						<Requirement type="conditional" logic="OR" not="true">
							<Requirement type="JobState" job="KrustyBurgerHipHopSession" building="KrustyBurger" state="Began" />
							<Requirement type="JobState" job="MoesTavernHipHopSession" character="{CharacterName}" state="Began" />
							<Requirement type="JobState" job="KwikEMartHipHopSession" character="{CharacterName}" state="Began" />
							<Requirement type="JobState" job="HipHopStageSession" character="{CharacterName}" state="Began" />
						</Requirement>
					</Requirement>
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="KrustyBurger" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtHipHopStage" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="HipHopStage" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<Else>
				<Then>
					<Action type="runScript" script="Music_Scripts:Tab_Sessions" />
				</Then>
			</Else>
		</Action>
	</GoToHipHopSessionForCharacter>
	<GoToHipHopStageSessionForCharacter>
		<Action type="if" formatMe="deep">
			<If>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtHipHopStage" />
					<Requirement type="conditional" logic="OR">
						<Requirement type="JobState" job="HipHopStageSession" character="{CharacterName}" state="Began" />
						<Requirement type="conditional" logic="OR" not="true">
							<Requirement type="JobState" job="HipHopStageSession" building="HipHopStage" state="Began" />
							<Requirement type="JobState" job="MoesTavernHipHopSession" character="{CharacterName}" state="Began" />
							<Requirement type="JobState" job="KwikEMartHipHopSession" character="{CharacterName}" state="Began" />
							<Requirement type="JobState" job="KrustyBurgerHipHopSession" character="{CharacterName}" state="Began" />
						</Requirement>
					</Requirement>
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="HipHopStage" />
						</Objects>
					</Action>
				</Then>
			</If>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtMoesTavern" />
					<Requirement type="JobState" job="MoesTavernHipHopSession" character="{CharacterName}" state="Began" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="MoesTavern" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtKwikEMart" />
					<Requirement type="JobState" job="KwikEMartHipHopSession" character="{CharacterName}" state="Began" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="Kwik-E-Mart" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtKrustyBurger" />
					<Requirement type="JobState" job="KrustyBurgerHipHopSession" character="{CharacterName}" state="Began" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="KrustyBurger" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<ElseIf>
				<Requirements>
					<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtHipHopStage" />
				</Requirements>
				<Then>
					<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
						<Objects>
							<ObjectByName name="HipHopStage" />
						</Objects>
					</Action>
				</Then>
			</ElseIf>
			<Else>
				<Then>
					<Action type="runScript" script="Music_Scripts:Tab_Sessions" />
				</Then>
			</Else>
		</Action>
	</GoToHipHopStageSessionForCharacter>
	<GoToRockStageSession>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<False>
				<Action type="gotoland" land="Springfield" showPopup="true" />
			</False>
			<True>
				<Action type="if">
					<If>
						<Requirements>
							<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtRockStage" />
						</Requirements>
						<Then>
							<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
								<Objects>
									<ObjectByName name="RockStage" />
								</Objects>
							</Action>
						</Then>
					</If>
					<Else>
						<Then>
							<Action type="runScript" script="Music_Scripts:Tab_Sessions" />
						</Then>
					</Else>
				</Action>
			</True>
		</Action>
	</GoToRockStageSession>
	<GoToPopStageSession>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<False>
				<Action type="gotoland" land="Springfield" showPopup="true" />
			</False>
			<True>
				<Action type="if">
					<If>
						<Requirements>
							<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtPopStage" />
						</Requirements>
						<Then>
							<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
								<Objects>
									<ObjectByName name="PopStage" />
								</Objects>
							</Action>
						</Then>
					</If>
					<Else>
						<Then>
							<Action type="runScript" script="Music_Scripts:Tab_Sessions" />
						</Then>
					</Else>
				</Action>
			</True>
		</Action>
	</GoToPopStageSession>
	<GoToHipHopStageSession>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<False>
				<Action type="gotoland" land="Springfield" showPopup="true" />
			</False>
			<True>
				<Action type="if">
					<If>
						<Requirements>
							<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtHipHopStage" />
						</Requirements>
						<Then>
							<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
								<Objects>
									<ObjectByName name="HipHopStage" />
								</Objects>
							</Action>
						</Then>
					</If>
					<Else>
						<Then>
							<Action type="runScript" script="Music_Scripts:Tab_Sessions" />
						</Then>
					</Else>
				</Action>
			</True>
		</Action>
	</GoToHipHopStageSession>
	<GoToSimpsonHomeSession>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<False>
				<Action type="gotoland" land="Springfield" showPopup="true" />
			</False>
			<True>
				<Action type="if">
					<If>
						<Requirements>
							<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtSimpsonHome" />
						</Requirements>
						<Then>
							<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
								<Objects>
									<ObjectByName name="SimpsonHome" />
								</Objects>
							</Action>
						</Then>
					</If>
					<Else>
						<Then>
							<Action type="runScript" script="Music_Scripts:Tab_Sessions" />
						</Then>
					</Else>
				</Action>
			</True>
		</Action>
	</GoToSimpsonHomeSession>
	<GoToKwikEMartSession>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<False>
				<Action type="gotoland" land="Springfield" showPopup="true" />
			</False>
			<True>
				<Action type="if">
					<If>
						<Requirements>
							<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtKwikEMart" />
						</Requirements>
						<Then>
							<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
								<Objects>
									<ObjectByName name="Kwik-E-Mart" />
								</Objects>
							</Action>
						</Then>
					</If>
					<Else>
						<Then>
							<Action type="runScript" script="Music_Scripts:Tab_Sessions" />
						</Then>
					</Else>
				</Action>
			</True>
		</Action>
	</GoToKwikEMartSession>
	<GoToKrustyBurgerSession>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<False>
				<Action type="gotoland" land="Springfield" showPopup="true" />
			</False>
			<True>
				<Action type="if">
					<If>
						<Requirements>
							<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtKrustyBurger" />
						</Requirements>
						<Then>
							<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
								<Objects>
									<ObjectByName name="KrustyBurger" />
								</Objects>
							</Action>
						</Then>
					</If>
					<Else>
						<Then>
							<Action type="runScript" script="Music_Scripts:Tab_Sessions" />
						</Then>
					</Else>
				</Action>
			</True>
		</Action>
	</GoToKrustyBurgerSession>
	<GoToSpringfieldElementarySession>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<False>
				<Action type="gotoland" land="Springfield" showPopup="true" />
			</False>
			<True>
				<Action type="if">
					<If>
						<Requirements>
							<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtSpringfieldElementary" />
						</Requirements>
						<Then>
							<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
								<Objects>
									<ObjectByName name="SpringfieldElementary" />
								</Objects>
							</Action>
						</Then>
					</If>
					<Else>
						<Then>
							<Action type="runScript" script="Music_Scripts:Tab_Sessions" />
						</Then>
					</Else>
				</Action>
			</True>
		</Action>
	</GoToSpringfieldElementarySession>
	<GoToMoesTavernSession>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<False>
				<Action type="gotoland" land="Springfield" showPopup="true" />
			</False>
			<True>
				<Action type="if">
					<If>
						<Requirements>
							<Requirement type="reqList" location="Music_Requirements:AllowSessionsAtMoesTavern" />
						</Requirements>
						<Then>
							<Action type="actionSequence" script="Music_Scripts:GoToBuildingSessionsUI">
								<Objects>
									<ObjectByName name="MoesTavern" />
								</Objects>
							</Action>
						</Then>
					</If>
					<Else>
						<Then>
							<Action type="runScript" script="Music_Scripts:Tab_Sessions" />
						</Then>
					</Else>
				</Action>
			</True>
		</Action>
	</GoToMoesTavernSession>
	<LicensePurchased>
		<Action type="setVariable" boolVariable="Music_SocialUpgrade_Purchased" boolValue="true" />
		<Action type="notificationLarge" icon="ICO_STOR_Music_License_Popup" title="CON_Music_License1_name" text="CON_Music_License1_desc" button="UI_OK" />
	</LicensePurchased>
	<OnPerformerRankUp parallel="true">
		<Action type="setObjectVariable" variable="level" value="min(Object::level + 1, 10)" asObjectExpression="true" />
		<Action type="program">
			<Program><![CDATA[ #program;
                    var obj = System::script['ObjectVariableIdentifierProvider'];
                    var level = ObjectVars::getVariableInt(obj, 'level');
                    var oldpoints = ObjectVars::getVariableInt(obj, 'points');
                    var newpoints = Selector::getValue('PerformersCostPerStarRank');
                    var starRanks = Attributes::createFromPackage('Music_Spreadsheet_Config:StarRanks');
                    var rushmultiplier = toDouble(Attributes::getValueFromAttributes(starRanks, toString('RankRush')));
                    var donuts = 0;
                    if(newpoints>oldpoints)
                    {
                        donuts = ((newpoints-oldpoints)*rushmultiplier);
                    }
                    
                    var cachedDonuts = User::getVariable('Music_PerformerDonuts');
                    var currentDonuts = User::getCurrencyAmount('donuts');
                    if (cachedDonuts == currentDonuts)
                    {
                        User::removeCurrencyAmount('donuts', donuts);
                    }
                    
                    User::setVariable('Music_PerformerDonuts', User::getCurrencyAmount('donuts'), true);
                    
                    Telemetry::logEvent(9608,'Enumeration', obj, 'Enumeration', toString(level), 'Enumeration', toString(donuts) );
                ]]></Program>
		</Action>
		<Action type="setObjectVariable" variable="points" value="Selector::getValue('PerformersCostPerStarRank')" asObjectExpression="true" />
	</OnPerformerRankUp>
	<Crowd_Init ignoreHUD="true">
		<Action type="setObjectVariable" variable="CrowdState" value="0" />
	</Crowd_Init>
	<Crowd_Tapped parallel="true">
		<Action type="setObjectVariable" variable="CrowdState" value="mod(Object::CrowdState+1,3)" asExpression="true" />
		<Action type="anim-play" animation="Crowd_Neutral" nowait="true" />
	</Crowd_Tapped>
	<Music_Prestige_Act1>
		<Action type="reward">
			<Item type="consumable" name="Music_Prestige_Act1" useImmediately="true" />
		</Action>
	</Music_Prestige_Act1>
	<Music_Prestige_Act2>
		<Action type="reward">
			<Item type="consumable" name="Music_Prestige_Act2" useImmediately="true" />
		</Action>
	</Music_Prestige_Act2>
	<Music_Prestige_Act3>
		<Action type="reward">
			<Item type="consumable" name="Music_Prestige_Act3" useImmediately="true" />
		</Action>
	</Music_Prestige_Act3>
	<RockStage_ActiveIn parallel="true">
		<Action type="setObjectVariable" variable="Active_Out" value="0">
			<Objects>
				<ObjectByName name="RockStage" />
			</Objects>
		</Action>
		<Action type="setObjectVariable" variable="Active_In" value="1">
			<Objects>
				<ObjectByName name="RockStage" />
			</Objects>
		</Action>
	</RockStage_ActiveIn>
	<RockStage_Active parallel="true">
		<Action type="setObjectVariable" variable="Active_In" value="0">
			<Objects>
				<ObjectByName name="RockStage" />
			</Objects>
		</Action>
		<Action type="setObjectVariable" variable="Active" value="1">
			<Objects>
				<ObjectByName name="RockStage" />
			</Objects>
		</Action>
	</RockStage_Active>
	<RockStage_ActiveOut parallel="true">
		<Action type="setObjectVariable" variable="Active" value="0">
			<Objects>
				<ObjectByName name="RockStage" />
			</Objects>
		</Action>
		<Action type="setObjectVariable" variable="Active_Out" value="1">
			<Objects>
				<ObjectByName name="RockStage" />
			</Objects>
		</Action>
	</RockStage_ActiveOut>
	<HipHopStage_ActiveIn parallel="true">
		<Action type="setObjectVariable" variable="Active_Out" value="0">
			<Objects>
				<ObjectByName name="HipHopStage" />
			</Objects>
		</Action>
		<Action type="setObjectVariable" variable="Active_In" value="1">
			<Objects>
				<ObjectByName name="HipHopStage" />
			</Objects>
		</Action>
	</HipHopStage_ActiveIn>
	<HipHopStage_Active parallel="true">
		<Action type="setObjectVariable" variable="Active_In" value="0">
			<Objects>
				<ObjectByName name="HipHopStage" />
			</Objects>
		</Action>
		<Action type="setObjectVariable" variable="Active" value="1">
			<Objects>
				<ObjectByName name="HipHopStage" />
			</Objects>
		</Action>
	</HipHopStage_Active>
	<HipHopStage_ActiveOut parallel="true">
		<Action type="setObjectVariable" variable="Active" value="0">
			<Objects>
				<ObjectByName name="HipHopStage" />
			</Objects>
		</Action>
		<Action type="setObjectVariable" variable="Active_Out" value="1">
			<Objects>
				<ObjectByName name="HipHopStage" />
			</Objects>
		</Action>
	</HipHopStage_ActiveOut>
	<PopStage_ActiveIn parallel="true">
		<Action type="setObjectVariable" variable="Active_Out" value="0">
			<Objects>
				<ObjectByName name="PopStage" />
			</Objects>
		</Action>
		<Action type="setObjectVariable" variable="Active_In" value="1">
			<Objects>
				<ObjectByName name="PopStage" />
			</Objects>
		</Action>
	</PopStage_ActiveIn>
	<PopStage_Active parallel="true">
		<Action type="setObjectVariable" variable="Active_In" value="0">
			<Objects>
				<ObjectByName name="PopStage" />
			</Objects>
		</Action>
		<Action type="setObjectVariable" variable="Active" value="1">
			<Objects>
				<ObjectByName name="PopStage" />
			</Objects>
		</Action>
	</PopStage_Active>
	<PopStage_ActiveOut parallel="true">
		<Action type="setObjectVariable" variable="Active" value="0">
			<Objects>
				<ObjectByName name="PopStage" />
			</Objects>
		</Action>
		<Action type="setObjectVariable" variable="Active_Out" value="1">
			<Objects>
				<ObjectByName name="PopStage" />
			</Objects>
		</Action>
	</PopStage_ActiveOut>
	<PromoteMusicMysteryBox_Start parallel="true">
		<Action type="recommendation" recType="Promoted" name="Music_MysteryBox" />
	</PromoteMusicMysteryBox_Start>
	<BlastingBass_Tapped parallel="true" ignoreHUD="true">
		<Action type="anim-play" animation="ActiveNoLoop" />
	</BlastingBass_Tapped>
	<FestivalFence_Tapped parallel="true" ignoreHUD="true">
		<Action type="anim-play" animation="ActiveNoLoop" />
	</FestivalFence_Tapped>
	<DCS_Reset_FestivalFans>
		<Action type="updateVariable" variable="Music_DCS_FestivalFans" value="0" />
	</DCS_Reset_FestivalFans>
	<EnableSessionsAct2 parallel="true">
		<Action type="setVariable" intVariable="Session_MoesSessions" intValue="8" />
		<Action type="setVariable" intVariable="Session_KwikEMartSessions" intValue="8" />
		<Action type="runScript" script="Music_Scripts:UpdateSessionIndicesForNewAct" />
	</EnableSessionsAct2>
	<EnableSessionsAct3 parallel="true">
		<Action type="setVariable" intVariable="Session_MoesSessions" intValue="12" />
		<Action type="setVariable" intVariable="Session_KwikEMartSessions" intValue="12" />
		<Action type="runScript" script="Music_Scripts:UpdateSessionIndicesForNewAct" />
	</EnableSessionsAct3>
	<UpdateSessionIndicesForNewAct parallel="true">
		<Action type="program">
			<Program><![CDATA[
                    #program;
                    {
                        function updateSessionIndexVariable( prevActSessions, newActSessions, indexVariable )
                        {
                            var oldSessionKey = ObjectVars::getVariableString(prevActSessions, toString(User::getVariable(indexVariable)));
                            for(var newIndex = 0; newIndex < 15; newIndex++)
                            {
                                var newSessionKey = ObjectVars::getVariableString(newActSessions, toString(newIndex));
                                if( oldSessionKey == newSessionKey )
                                {
                                    User::setVariable(indexVariable, newIndex, 0);
                                    return;
                                }
                            }
                        }
                    
                        var newAct = 2;
                        if(Requirements::checkRequirementList('Music_Requirements:InActThreeSessions'))
                        {
                            newAct = 3;
                        }
                        var oldAct = newAct - 1;
                        
                        updateSessionIndexVariable('Obj_KwikEMart_Sessions_Act' + toString(oldAct), 'Obj_KwikEMart_Sessions_Act' + toString(newAct), 'Session_KwikEMartCurrentSession');
                        updateSessionIndexVariable('Obj_MoesTavern_Sessions_Act' + toString(oldAct), 'Obj_MoesTavern_Sessions_Act' + toString(newAct), 'Session_MoesCurrentSession');
                        
                        return;
                    }
                ]]></Program>
		</Action>
	</UpdateSessionIndicesForNewAct>
	<ShowJobList ignoreHUD="true">
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<True>
				<Action type="if">
					<If>
						<Requirement type="active quest" quest="WeirdAlTruism_3" />
						<Then>
							<Action type="gotoState" state="GameState_SpecialEventJobList" backButtonRestoresPreviousState="true">
								<Extras>
									<Attribute name="SpecialEvent" value="Music_Event" />
									<Attribute name="JobList" value="Music_JL_03" />
								</Extras>
							</Action>
						</Then>
					</If>
					<ElseIf>
						<Requirement type="active quest" quest="WeirdAlTruism_4" />
						<Then>
							<Action type="gotoState" state="GameState_SpecialEventJobList">
								<Extras>
									<Attribute name="SpecialEvent" value="Music_Event" />
									<Attribute name="JobList" value="Music_JL_04" />
								</Extras>
							</Action>
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirement type="active quest" quest="WeirdAlTruism_5" />
						<Then>
							<Action type="gotoState" state="GameState_SpecialEventJobList">
								<Extras>
									<Attribute name="SpecialEvent" value="Music_Event" />
									<Attribute name="JobList" value="Music_JL_05" />
								</Extras>
							</Action>
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirement type="active quest" quest="WeirdAlTruism_6" />
						<Then>
							<Action type="gotoState" state="GameState_SpecialEventJobList">
								<Extras>
									<Attribute name="SpecialEvent" value="Music_Event" />
									<Attribute name="JobList" value="Music_JL_06" />
								</Extras>
							</Action>
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirement type="active quest" quest="WeirdAlTruism_7" />
						<Then>
							<Action type="gotoState" state="GameState_SpecialEventJobList">
								<Extras>
									<Attribute name="SpecialEvent" value="Music_Event" />
									<Attribute name="JobList" value="Music_JL_07" />
								</Extras>
							</Action>
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirement type="active quest" quest="WeirdAlTruism_8" />
						<Then>
							<Action type="gotoState" state="GameState_SpecialEventJobList">
								<Extras>
									<Attribute name="SpecialEvent" value="Music_Event" />
									<Attribute name="JobList" value="Music_JL_08" />
								</Extras>
							</Action>
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirement type="active quest" quest="WeirdAlTruism_9" />
						<Then>
							<Action type="gotoState" state="GameState_SpecialEventJobList">
								<Extras>
									<Attribute name="SpecialEvent" value="Music_Event" />
									<Attribute name="JobList" value="Music_JL_09" />
								</Extras>
							</Action>
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirement type="active quest" quest="WeirdAlTruism_10" />
						<Then>
							<Action type="gotoState" state="GameState_SpecialEventJobList">
								<Extras>
									<Attribute name="SpecialEvent" value="Music_Event" />
									<Attribute name="JobList" value="Music_JL_10" />
								</Extras>
							</Action>
						</Then>
					</ElseIf>
					<ElseIf>
						<Requirement type="active quest" quest="WeirdAlTruism_11" />
						<Then>
							<Action type="gotoState" state="GameState_SpecialEventJobList">
								<Extras>
									<Attribute name="SpecialEvent" value="Music_Event" />
									<Attribute name="JobList" value="Music_JL_11" />
								</Extras>
							</Action>
						</Then>
					</ElseIf>
				</Action>
			</True>
			<False>
				<Action type="pantoobject" building="KrustylandShuttleToSpringfield" fakeTouch="true" />
			</False>
		</Action>
	</ShowJobList>
	<WeirdAlGenreUnlock>
		<Action type="reward">
			<Item type="character" name="WeirdAlYankovic" useImmediately="true" />
		</Action>
		<Action type="setVariable" intVariable="WeirdAl_Rock_Unlocked" intValue="1" />
		<Action type="setVariable" intVariable="WeirdAl_Pop_Unlocked" intValue="1" />
		<Action type="setVariable" intVariable="WeirdAl_HipHop_Unlocked" intValue="1" />
	</WeirdAlGenreUnlock>
	<Spawn_WeirdAl_NPC ignoreHUD="true">
		<Action type="createobject" name="FakeWeirdAl" save="true" showUnlock="false" panCamera="true" />
	</Spawn_WeirdAl_NPC>
	<FakeWeirdAl_Tapped parallel="true">
		<Action type="checkRequirements">
			<Requirement type="quest" quest="WeirdAlTruism_1" />
			<True>
				<Action type="runScriptOnAll" character="FestivalFan" script="Music_Scripts:FollowWeirdAl" />
				<Action type="scheduleScript" mode="create" script="Music_Scripts:FakeWeirdAlAnimDone" persistUntilComplete="true" localLandOnly="true" shouldSave="true" relativeTime="20s" />
				<Action type="setcontroller" controller="WeirdAlPerforms" character="FakeWeirdAl" block="false" focus="false" />
			</True>
		</Action>
	</FakeWeirdAl_Tapped>
	<FakeWeirdAlAnimDone>
		<Action type="runScript" script="Music_Scripts:RefreshFestivalFanLocations" />
		<Action type="scheduleScript" mode="delete" script="Music_Scripts:FakeWeirdAlAnimDone" />
	</FakeWeirdAlAnimDone>
	<FollowWeirdAl>
		<Action type="setMovementBehavior">
			<MovementBehavior mode="RandomRelaxed">
				<RandomSpeed minSpeed="100" maxSpeed="100" />
				<Follow character="FakeWeirdAl" visible="true" distance="1" faceCharacter="true" useFollowOffset="true" followOffsetX="#program;                                 var offset=rand(2.0)+1.0;                                 if(rand(2)==0)                                 {                                     offset = offset * -1.0;                                 }                                 return offset;" followOffsetY="#program;                                 var offset=rand(2.0)+1.0;                                 if(rand(2)==0)                                 {                                     offset = offset * -1.0;                                 }                                 return offset;" shouldFaceFollowCharacter="true" />
			</MovementBehavior>
		</Action>
	</FollowWeirdAl>
	<AutoconsumeRockinOttoSkin_End parallel="true">
		<Action type="scheduleScript" mode="create" script="Music_Scripts:AutoconsumeRockinOttoSkin_Delayed" relativeTime="2s" localLandOnly="true" shouldSave="true" />
	</AutoconsumeRockinOttoSkin_End>
	<AutoconsumeRockinOttoSkin_Delayed parallel="true">
		<Action type="consumable" consumable="RockinOtto" fromInventory="true" />
	</AutoconsumeRockinOttoSkin_Delayed>
	<AutoConsumeManagerCletusSkin_End parallel="true">
		<Action type="consumable" consumable="ManagerCletus" fromInventory="true" />
	</AutoConsumeManagerCletusSkin_End>
	<RegisterTelemetry_Job_Regular parallel="true">
		<Action type="updateVariable" variable="Music_MoochFunds_RegularJob" value="Music_MoochFunds_RegularJob + ConfigValue('__Music_GameConfig:WeirdAlPayout:Amount__')" />
		<Action type="updateVariable" variable="Music_MoochFunds_Total" value="Music_MoochFunds_Total + ConfigValue('__Music_GameConfig:WeirdAlPayout:Amount__')" />
	</RegisterTelemetry_Job_Regular>
	<RegisterTelemetry_Job_Premium parallel="true">
		<Action type="updateVariable" variable="Music_MoochFunds_PremiumJob" value="Music_MoochFunds_PremiumJob + ConfigValue('__Music_GameConfig:WeirdAlPremiumPayout:Amount__')" />
		<Action type="updateVariable" variable="Music_MoochFunds_Total" value="Music_MoochFunds_Total + ConfigValue('__Music_GameConfig:WeirdAlPremiumPayout:Amount__')" />
	</RegisterTelemetry_Job_Premium>
	<LogTelemetry parallel="true">
		<Action type="logevent" formatMe="true" param1Type="Enumeration" param1="{task}" param2Type="Enumeration" param2="{Total}" param3Type="Enumeration" param3="Music" eventId="9501" />
		<Action type="logevent" formatMe="true" param1Type="Enumeration" param1="RegularReward{task}" param2Type="Enumeration" param2="{Regular}" param3Type="Enumeration" param3="Music" eventId="9502" />
		<Action type="logevent" formatMe="true" param1Type="Enumeration" param1="PremiumReward{task}" param2Type="Enumeration" param2="{Premium}" param3Type="Enumeration" param3="Music" eventId="9502" />
		<Action type="setVariable" intVariable="Music_MoochFunds_RegularJob" intValue="0" />
		<Action type="setVariable" intVariable="Music_MoochFunds_PremiumJob" intValue="0" />
	</LogTelemetry>
	<GetSherriandTerri parallel="true">
		<Action type="focusOnMenuItem" menuCategory="Characters" itemName="SherriandTerri" />
	</GetSherriandTerri>
	<FlamingMoesPurchased>
		<Action type="checkRequirements">
			<Requirement type="building" building="MoesTavern" />
			<True>
				<Action type="pantoobject" building="MoesTavern" fakeTouch="false" />
			</True>
			<False>
				<Action type="notificationLarge" icon="MoesTavern_FlamingMoes_Menu" title="BLD_FlamingMoes_name" text="UI_EoS2015_ItemInInventory" button="UI_OK" />
				<Action type="focusOnMenuItem" itemName="FlamingMoes" inventory="true" />
			</False>
		</Action>
	</FlamingMoesPurchased>
	<WeirdAlCraftingReward>
		<Action type="reward" Music_TicketStubs="__Music_Spreadsheet_Config:QuestRewards:WeirdAl_CraftingCurrency__" />
	</WeirdAlCraftingReward>
	<WeirdAlPrizeTrackReward>
		<Action type="reward" Music_ActivePrizeTrackCurrency="__Music_Spreadsheet_Config:QuestRewards:WeirdAl_EventCurrency__" />
	</WeirdAlPrizeTrackReward>
	<WeirdAlRockJob>
		<Action type="setVariable" intVariable="WeirdAl_Rock_Unlocked" intValue="1" />
	</WeirdAlRockJob>
	<WeirdAlPopJob>
		<Action type="setVariable" intVariable="WeirdAl_Pop_Unlocked" intValue="1" />
	</WeirdAlPopJob>
	<WeirdAlHipHopJob>
		<Action type="setVariable" intVariable="WeirdAl_HipHop_Unlocked" intValue="1" />
	</WeirdAlHipHopJob>
	<OnWeirdAlYankovicLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'WeirdAlYankovic';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnWeirdAlYankovicLost>
	<OnRockstarMaggieLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'RockstarMaggie';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnRockstarMaggieLost>
	<OnBleedingGumsMurphyLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'BleedingGumsMurphy';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnBleedingGumsMurphyLost>
	<OnAlcatraaazLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'Alcatraaaz';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnAlcatraaazLost>
	<OnMaggieLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'Maggie';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnMaggieLost>
	<OnKrustyLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'Krusty';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnKrustyLost>
	<OnLeonKompowskyLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'LeonKompowsky';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnLeonKompowskyLost>
	<OnAlaskaNebraskaLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'AlaskaNebraska';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnAlaskaNebraskaLost>
	<OnBartLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'Bart';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnBartLost>
	<OnNelsonLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'Nelson';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnNelsonLost>
	<OnRalphLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'Ralph';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnRalphLost>
	<OnMilhouseLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'Milhouse';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnMilhouseLost>
	<OnShredderStevensLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'ShredderStevens';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnShredderStevensLost>
	<OnFreddyFreemanLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'FreddyFreeman';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnFreddyFreemanLost>
	<OnOttoLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'Otto';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnOttoLost>
	<OnPeterDAbbruzioLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'PeterDAbbruzio';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnPeterDAbbruzioLost>
	<OnNickDelacourtLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'NickDelacourt';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnNickDelacourtLost>
	<OnLisaLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'Lisa';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnLisaLost>
	<OnLovejoyLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'Lovejoy';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnLovejoyLost>
	<OnApuLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'Apu';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnApuLost>
	<OnHomerLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'Homer';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnHomerLost>
	<OnHibbertLost>
		<Action type="program">
			<Program><![CDATA[#program;
                     var scriptCharacterName = 'DrHibbert';
                     
                     var hook = 'Music_Hooks';
                     Hook::load(hook,false);
                     var compiledHook = Parser::compile(Hook::toString(hook+':UpdateRewardFromCharacterLost'));
                     Hook::unload(hook,false);
                     
                     Parser::evaluate(compiledHook);
                 ]]></Program>
		</Action>
	</OnHibbertLost>
	<VenueUnlock_SimpsonHome>
		<Action type="hudTip" text="UI_VenueUnlock_SimpsonHome" time="5s" queue="true" waitForHUD="true" />
	</VenueUnlock_SimpsonHome>
	<VenueUnlock_SpringfieldElementary>
		<Action type="hudTip" text="UI_VenueUnlock_SpringfieldElementary" time="5s" queue="true" waitForHUD="true" />
	</VenueUnlock_SpringfieldElementary>
	<VenueUnlock_KrustyBurger>
		<Action type="hudTip" text="UI_VenueUnlock_KrustyBurger" time="5s" queue="true" waitForHUD="true" />
	</VenueUnlock_KrustyBurger>
	<JayGBundleReward>
		<Action type="hudTip" text="UI_AtW_ItemPurchased" time="5s" queue="true" waitForHUD="true" />
	</JayGBundleReward>
	<AttendeeBundleReward>
		<Action type="hudTip" text="UI_AtW_ItemPurchased" time="5s" queue="true" waitForHUD="true" />
	</AttendeeBundleReward>
	<RockStage_JobList>
		<Action type="gotoState" state="GameState_JobList" extras="Music_MenuConfig_Misc:RockStage_JobList" />
	</RockStage_JobList>
	<PopStage_JobList>
		<Action type="gotoState" state="GameState_JobList" extras="Music_MenuConfig_Misc:PopStage_JobList" />
	</PopStage_JobList>
	<HipHopStage_JobList>
		<Action type="gotoState" state="GameState_JobList" extras="Music_MenuConfig_Misc:HipHopStage_JobList" />
	</HipHopStage_JobList>
	<GoToRockStage_PeterDAbbruzio>
		<Action type="checkRequirements">
			<Requirement type="building owned" building="RockStage" />
			<False>
				<Action type="touchCharacter" character="PeterDAbbruzio" />
			</False>
			<True>
				<Action type="checkRequirements">
					<Requirement type="place building" building="RockStage" />
					<False>
						<Action type="focusOnMenuItem" itemName="RockStage" inventory="true" />
					</False>
					<True>
						<Action type="pantoobject" building="RockStage" fakeTouch="true" />
					</True>
				</Action>
			</True>
		</Action>
	</GoToRockStage_PeterDAbbruzio>
	<GoToPopStage_AlaskaNebraska>
		<Action type="checkRequirements">
			<Requirement type="character" name="AlaskaNebraska" />
			<False>
				<Action type="focusOnMenuItem" itemName="AlaskaNebraska" inventory="true" />
			</False>
			<True>
				<Action type="checkRequirements">
					<Requirement type="building owned" building="PopStage" />
					<False>
						<Action type="touchCharacter" character="AlaskaNebraska" />
					</False>
					<True>
						<Action type="checkRequirements">
							<Requirement type="place building" building="PopStage" />
							<False>
								<Action type="focusOnMenuItem" itemName="PopStage" inventory="true" />
							</False>
							<True>
								<Action type="pantoobject" building="PopStage" fakeTouch="true" />
							</True>
						</Action>
					</True>
				</Action>
			</True>
		</Action>
	</GoToPopStage_AlaskaNebraska>
	<GoToHipHopStage_RappinBart>
		<Action type="checkRequirements">
			<Requirement type="building owned" building="HipHopStage" />
			<False>
				<Action type="touchCharacter" character="Bart" />
			</False>
			<True>
				<Action type="checkRequirements">
					<Requirement type="place building" building="HipHopStage" />
					<False>
						<Action type="focusOnMenuItem" itemName="HipHopStage" inventory="true" />
					</False>
					<True>
						<Action type="pantoobject" building="HipHopStage" fakeTouch="true" />
					</True>
				</Action>
			</True>
		</Action>
	</GoToHipHopStage_RappinBart>
	<GoToRockStage_RockinOtto>
		<Action type="checkRequirements">
			<Requirement type="building owned" building="RockStage" />
			<False>
				<Action type="touchCharacter" character="Otto" />
			</False>
			<True>
				<Action type="checkRequirements">
					<Requirement type="place building" building="RockStage" />
					<False>
						<Action type="focusOnMenuItem" itemName="RockStage" inventory="true" />
					</False>
					<True>
						<Action type="pantoobject" building="RockStage" fakeTouch="true" />
					</True>
				</Action>
			</True>
		</Action>
	</GoToRockStage_RockinOtto>
	<Millennial_Tapped parallel="true">
		<Action type="anim-play" animation="Tap" />
	</Millennial_Tapped>
	<Hipster_Tapped parallel="true">
		<Action type="anim-play" animation="Tap" />
	</Hipster_Tapped>
	<Groupie_Tapped parallel="true">
		<Action type="anim-play" animation="Tap" />
	</Groupie_Tapped>
	<CopyrightLawyer_Tapped parallel="true">
		<Action type="anim-play" animation="Tap" />
	</CopyrightLawyer_Tapped>
	<Music_GoToMillennial>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<False>
				<Action type="gotoland" land="Springfield" showPopup="true" />
			</False>
			<True>
				<Action type="pantoobject" time="0" character="Millennial" fakeTouch="false" />
			</True>
		</Action>
	</Music_GoToMillennial>
	<Music_GoToHipster>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<False>
				<Action type="gotoland" land="Springfield" showPopup="true" />
			</False>
			<True>
				<Action type="pantoobject" time="0" character="Hipster" fakeTouch="false" />
			</True>
		</Action>
	</Music_GoToHipster>
	<Music_GoToGroupie>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<False>
				<Action type="gotoland" land="Springfield" showPopup="true" />
			</False>
			<True>
				<Action type="pantoobject" time="0" character="Groupie" fakeTouch="false" />
			</True>
		</Action>
	</Music_GoToGroupie>
	<Music_GoToCopyrightLawyer>
		<Action type="checkRequirements">
			<Requirement type="land" land="Springfield" />
			<False>
				<Action type="gotoland" land="Springfield" showPopup="true" />
			</False>
			<True>
				<Action type="pantoobject" time="0" character="CopyrightLawyer" fakeTouch="false" />
			</True>
		</Action>
	</Music_GoToCopyrightLawyer>
	<FlamingMoesFranchise_Reward>
		<Action type="SilentlyUnlockSkin" skin="FlamingMoesFranchise" />
	</FlamingMoesFranchise_Reward>
</ScriptPackage>